{"ast":null,"code":"import _slicedToArray from \"/Users/liuhongyang/Documents/GitHub/repositories/mindmap/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as refer from '../statics/refer';\n\nconst drawBezier = (ctx, from_x, from_y, to_x, to_y) => {\n  ctx.moveTo(from_x, from_y);\n  ctx.bezierCurveTo(from_x, to_y, 0.9 * to_x + 0.1 * from_x, to_y, to_x, to_y);\n};\n\nconst drawLine = (ctx, node, map) => {\n  const parent_id = node.id,\n        children = node.children;\n\n  if (children.length > 0) {\n    const _map$get = map.get(parent_id),\n          _map$get2 = _slicedToArray(_map$get, 3),\n          parent_x_left = _map$get2[0],\n          parent_x_right = _map$get2[1],\n          parent_y = _map$get2[2];\n\n    children.forEach(child => {\n      const child_data = map.get(child.id);\n\n      if (child_data) {\n        const _child_data = _slicedToArray(child_data, 4),\n              child_x_left = _child_data[0],\n              child_x_right = _child_data[1],\n              child_y = _child_data[2],\n              child_tag = _child_data[3];\n\n        if (child_tag === refer.LEFT_NODE) {\n          drawBezier(ctx, parent_x_left, parent_y, child_x_right, child_y);\n        } else {\n          drawBezier(ctx, parent_x_right, parent_y, child_x_left, child_y);\n        }\n\n        drawLine(ctx, child, map);\n      }\n    });\n  }\n};\n\nexport const drawLineCanvas = (ctx, theme, mindmap, map) => {\n  ctx.beginPath();\n  ctx.lineWidth = '2';\n  ctx.strokeStyle = theme.main;\n  drawLine(ctx, mindmap, map);\n  ctx.stroke();\n  ctx.closePath();\n};\nexport const drawDragCanvas = (ctx, theme, child_id, parent_offset, child_offset, child_left_of_parent) => {\n  const virtual_rect_width = 50,\n        virtual_rect_height = 20;\n  ctx.beginPath();\n  ctx.strokeStyle = theme.main;\n  ctx.lineWidth = '2';\n  ctx.setLineDash([5, 5]);\n  let parent_x,\n      parent_y = (parent_offset.top + parent_offset.bottom) / 2,\n      child_x,\n      child_y = (child_offset.top + child_offset.bottom) / 2;\n\n  if (child_left_of_parent) {\n    parent_x = parent_offset.left;\n    child_x = child_offset.right;\n    ctx.strokeRect(child_x - virtual_rect_width, child_y - virtual_rect_height / 2, virtual_rect_width, virtual_rect_height);\n  } else {\n    parent_x = parent_offset.right;\n    child_x = child_offset.left;\n    ctx.strokeRect(child_x, child_y - virtual_rect_height / 2, virtual_rect_width, virtual_rect_height);\n  }\n\n  drawBezier(ctx, parent_x, parent_y, child_x, child_y);\n  ctx.stroke();\n  ctx.closePath();\n};","map":{"version":3,"sources":["/Users/liuhongyang/Documents/GitHub/repositories/mindmap/src/methods/drawCanvas.js"],"names":["refer","drawBezier","ctx","from_x","from_y","to_x","to_y","moveTo","bezierCurveTo","drawLine","node","map","parent_id","id","children","length","get","parent_x_left","parent_x_right","parent_y","forEach","child","child_data","child_x_left","child_x_right","child_y","child_tag","LEFT_NODE","drawLineCanvas","theme","mindmap","beginPath","lineWidth","strokeStyle","main","stroke","closePath","drawDragCanvas","child_id","parent_offset","child_offset","child_left_of_parent","virtual_rect_width","virtual_rect_height","setLineDash","parent_x","top","bottom","child_x","left","right","strokeRect"],"mappings":"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","sourcesContent":["import * as refer from '../statics/refer';\n\nconst drawBezier = (ctx, from_x, from_y, to_x, to_y) => {\n    ctx.moveTo(from_x, from_y);\n    ctx.bezierCurveTo(from_x, to_y, 0.9 * to_x + 0.1 * from_x, to_y, to_x, to_y);\n};\n\nconst drawLine = (ctx, node, map) => {\n    const {id: parent_id, children} = node;\n    if (children.length > 0) {\n        const [parent_x_left, parent_x_right, parent_y] = map.get(parent_id);\n\n        children.forEach(child => {\n            const child_data = map.get(child.id);\n            if (child_data) {\n                const [child_x_left, child_x_right, child_y, child_tag] = child_data;\n                if (child_tag === refer.LEFT_NODE) {\n                    drawBezier(ctx, parent_x_left, parent_y, child_x_right, child_y);\n                } else {\n                    drawBezier(ctx, parent_x_right, parent_y, child_x_left, child_y);\n                }\n                drawLine(ctx, child, map);\n            }\n        })\n    }\n};\n\nexport const drawLineCanvas = (ctx, theme, mindmap, map) => {\n    ctx.beginPath();\n    ctx.lineWidth = '2';\n    ctx.strokeStyle = theme.main;\n    drawLine(ctx, mindmap, map);\n    ctx.stroke();\n    ctx.closePath();\n};\n\nexport const drawDragCanvas = (ctx, theme, child_id, parent_offset, child_offset, child_left_of_parent) => {\n    const virtual_rect_width = 50,\n        virtual_rect_height = 20;\n    ctx.beginPath();\n    ctx.strokeStyle = theme.main;\n    ctx.lineWidth = '2';\n    ctx.setLineDash([5, 5]);\n    let parent_x,\n        parent_y = (parent_offset.top + parent_offset.bottom) / 2,\n        child_x,\n        child_y = (child_offset.top + child_offset.bottom) / 2;\n    if (child_left_of_parent) {\n        parent_x = parent_offset.left;\n        child_x = child_offset.right;\n        ctx.strokeRect(child_x - virtual_rect_width, child_y - virtual_rect_height / 2, virtual_rect_width, virtual_rect_height);\n    } else {\n        parent_x = parent_offset.right;\n        child_x = child_offset.left;\n        ctx.strokeRect(child_x, child_y - virtual_rect_height / 2, virtual_rect_width, virtual_rect_height);\n    }\n    drawBezier(ctx, parent_x, parent_y, child_x, child_y);\n    ctx.stroke();\n    ctx.closePath();\n};"]},"metadata":{},"sourceType":"module"}