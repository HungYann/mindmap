{"ast":null,"code":"var _jsxFileName = \"/Users/liuhongyang/Documents/GitHub/repositories/mindmap/src/components/RootNode/index.js\";\nimport React, { useEffect, useRef } from 'react';\nimport { css } from 'emotion';\nimport { ROOT_PARENT } from '../../statics/refer';\nimport Node from '../Node';\nimport SubNode from '../SubNode';\n\nconst RootNode = ({\n  layer,\n  node,\n  node_refs\n}) => {\n  const root_node = useRef();\n  const total = node.children.length,\n        half = total > 3 ? Math.trunc(total / 2) : total; // 载入时使根节点居中。暂时没发现除了多包一层 div 之外更好的解决方法\n\n  useEffect(() => {\n    root_node.current.scrollIntoView({\n      block: 'center',\n      inline: 'center'\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: wrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, node.showChildren && node.children.slice(half).map(sub_node => /*#__PURE__*/React.createElement(SubNode, {\n    key: sub_node.id,\n    layer: layer + 1,\n    node: sub_node,\n    node_refs: node_refs,\n    parent: node,\n    on_left: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 77\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    ref: root_node,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Node, {\n    layer: 0,\n    node: node,\n    node_refs: node_refs,\n    parent: ROOT_PARENT,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, node.showChildren && node.children.slice(0, half).map(sub_node => /*#__PURE__*/React.createElement(SubNode, {\n    key: sub_node.id,\n    layer: layer + 1,\n    node: sub_node,\n    node_refs: node_refs,\n    parent: node,\n    on_left: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 80\n    }\n  }))));\n};\n\nexport default RootNode; // CSS\n\nconst wrapper = css`\ndisplay: flex;\nalign-items: center;\nwidth: max-content; /* max-content 才能保证正确读取布局 */\n`;","map":{"version":3,"sources":["/Users/liuhongyang/Documents/GitHub/repositories/mindmap/src/components/RootNode/index.js"],"names":["React","useEffect","useRef","css","ROOT_PARENT","Node","SubNode","RootNode","layer","node","node_refs","root_node","total","children","length","half","Math","trunc","current","scrollIntoView","block","inline","wrapper","showChildren","slice","map","sub_node","id"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,QAAuC,OAAvC;AACA,SAAQC,GAAR,QAAkB,SAAlB;AACA,SAAQC,WAAR,QAA0B,qBAA1B;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,OAAP,MAAoB,YAApB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA,IAAR;AAAcC,EAAAA;AAAd,CAAD,KAA8B;AAC3C,QAAMC,SAAS,GAAGT,MAAM,EAAxB;AAEA,QAAMU,KAAK,GAAGH,IAAI,CAACI,QAAL,CAAcC,MAA5B;AAAA,QACIC,IAAI,GAAGH,KAAK,GAAG,CAAR,GAAYI,IAAI,CAACC,KAAL,CAAWL,KAAK,GAAG,CAAnB,CAAZ,GAAoCA,KAD/C,CAH2C,CAM3C;;AACAX,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,SAAS,CAACO,OAAV,CAAkBC,cAAlB,CAAiC;AAACC,MAAAA,KAAK,EAAE,QAAR;AAAkBC,MAAAA,MAAM,EAAE;AAA1B,KAAjC;AACH,GAFQ,EAEN,EAFM,CAAT;AAIA,sBAAQ;AAAK,IAAA,SAAS,EAAEC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKb,IAAI,CAACc,YAAL,IAAqBd,IAAI,CAACI,QAAL,CAAcW,KAAd,CAAoBT,IAApB,EAA0BU,GAA1B,CAA8BC,QAAQ,iBAAI,oBAAC,OAAD;AAC5D,IAAA,GAAG,EAAEA,QAAQ,CAACC,EAD8C;AAE5D,IAAA,KAAK,EAAEnB,KAAK,GAAG,CAF6C;AAG5D,IAAA,IAAI,EAAEkB,QAHsD;AAI5D,IAAA,SAAS,EAAEhB,SAJiD;AAK5D,IAAA,MAAM,EAAED,IALoD;AAK9C,IAAA,OAAO,EAAE,IALqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA1C,CAD1B,CADI,eASJ;AAAK,IAAA,GAAG,EAAEE,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAAb;AAAgB,IAAA,IAAI,EAAEF,IAAtB;AAA4B,IAAA,SAAS,EAAEC,SAAvC;AAAkD,IAAA,MAAM,EAAEN,WAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CATI,eAYJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKK,IAAI,CAACc,YAAL,IAAqBd,IAAI,CAACI,QAAL,CAAcW,KAAd,CAAoB,CAApB,EAAuBT,IAAvB,EAA6BU,GAA7B,CAAiCC,QAAQ,iBAAI,oBAAC,OAAD;AAC/D,IAAA,GAAG,EAAEA,QAAQ,CAACC,EADiD;AAE/D,IAAA,KAAK,EAAEnB,KAAK,GAAG,CAFgD;AAG/D,IAAA,IAAI,EAAEkB,QAHyD;AAI/D,IAAA,SAAS,EAAEhB,SAJoD;AAK/D,IAAA,MAAM,EAAED,IALuD;AAM/D,IAAA,OAAO,EAAE,KANsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA7C,CAD1B,CAZI,CAAR;AAsBH,CAjCD;;AAmCA,eAAeF,QAAf,C,CAEA;;AACA,MAAMe,OAAO,GAAGnB,GAAI;;;;CAApB","sourcesContent":["import React, {useEffect, useRef} from 'react';\nimport {css} from 'emotion';\nimport {ROOT_PARENT} from '../../statics/refer';\nimport Node from '../Node';\nimport SubNode from '../SubNode';\n\nconst RootNode = ({layer, node, node_refs}) => {\n    const root_node = useRef();\n\n    const total = node.children.length,\n        half = total > 3 ? Math.trunc(total / 2) : total;\n\n    // 载入时使根节点居中。暂时没发现除了多包一层 div 之外更好的解决方法\n    useEffect(() => {\n        root_node.current.scrollIntoView({block: 'center', inline: 'center'});\n    }, []);\n\n    return (<div className={wrapper}>\n        <div>\n            {node.showChildren && node.children.slice(half).map(sub_node => <SubNode\n                key={sub_node.id}\n                layer={layer + 1}\n                node={sub_node}\n                node_refs={node_refs}\n                parent={node} on_left={true} />)}\n        </div>\n        <div ref={root_node}>\n            <Node layer={0} node={node} node_refs={node_refs} parent={ROOT_PARENT} />\n        </div>\n        <div>\n            {node.showChildren && node.children.slice(0, half).map(sub_node => <SubNode\n                key={sub_node.id}\n                layer={layer + 1}\n                node={sub_node}\n                node_refs={node_refs}\n                parent={node}\n                on_left={false} />)}\n        </div>\n    </div>);\n};\n\nexport default RootNode;\n\n// CSS\nconst wrapper = css`\ndisplay: flex;\nalign-items: center;\nwidth: max-content; /* max-content 才能保证正确读取布局 */\n`;"]},"metadata":{},"sourceType":"module"}