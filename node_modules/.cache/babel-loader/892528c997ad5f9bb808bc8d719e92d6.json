{"ast":null,"code":"import * as refer from '../statics/refer';\nimport { findNode } from './assistFunctions';\nimport { drawDragCanvas } from './drawCanvas';\n\nconst getDomOffset = dom => {\n  const left = dom.offsetLeft,\n        right = left + dom.offsetWidth,\n        top = dom.offsetTop,\n        bottom = top + dom.offsetHeight;\n  return {\n    left,\n    right,\n    top,\n    bottom\n  };\n};\n\nexport default ((mindmap, drag_canvas, container, theme, mindmapHook, zoom, drag) => {\n  const moveNode = mindmapHook.moveNode;\n  let node_id, parent_id, target_id, is_sibling, children, children_offset_left, children_offset_right, children_offset_vertical, parent_offset, parent_is_root, container_left, container_top, container_width, container_height, in_drop_area;\n\n  const resetVariables = () => {\n    node_id = '';\n    parent_id = '';\n    target_id = '';\n    is_sibling = false;\n    children = [];\n    children_offset_left = [];\n    children_offset_right = [];\n    children_offset_vertical = [];\n    parent_offset = undefined;\n    parent_is_root = false;\n    container_left = container.scrollLeft;\n    container_top = container.scrollTop - 56;\n    container_width = container.offsetWidth;\n    container_height = container.offsetHeight;\n    in_drop_area = false;\n  };\n\n  const handleContainerScroll = e => {\n    container_left = container.scrollLeft;\n    container_top = container.scrollTop - 56; // 56 是 container（Main 组件）顶部 margin 值        \n  };\n\n  return [{\n    type: 'dragstart',\n    listener: event => {\n      resetVariables();\n      container.addEventListener('scroll', handleContainerScroll);\n\n      if (event.target && (event.target.dataset.tag === refer.LEFT_NODE || event.target.dataset.tag === refer.RIGHT_NODE)) {\n        node_id = event.target.id;\n        parent_id = event.target.dataset.parent;\n        const parent = findNode(mindmap, parent_id);\n        parent_is_root = parent === mindmap;\n        parent_offset = getDomOffset(document.getElementById(parent_id));\n        children[0] = parent.children.map(child => child.id);\n        let children_offset = [];\n        children_offset[0] = children[0].map(node_id => getDomOffset(document.getElementById(node_id)));\n\n        if (parent_is_root && mindmap.children.length > 3) {\n          const half = Math.trunc(mindmap.children.length / 2);\n          children = [children[0].slice(0, half), children[0].slice(half)];\n          children_offset = [children_offset[0].slice(0, half), children_offset[0].slice(half)];\n        }\n\n        children_offset_left = children_offset.map(each => Math.min(...each.map(offset => offset.left)));\n        children_offset_right = children_offset.map(each => Math.max(...each.map(offset => offset.right)));\n        children_offset_vertical = children_offset.map(each => each.map(offset => [offset.top, offset.bottom]).reduce((flat_arr, cur) => flat_arr.concat(cur), []));\n      }\n    }\n  }, {\n    type: 'drag',\n    listener: event => {\n      const ctx = drag_canvas.getContext('2d');\n      ctx.clearRect(0, 0, drag_canvas.width, drag_canvas.height);\n      const total = children.length;\n      const moveX = -(container_width * drag.x / 100);\n      const moveY = -(container_height * drag.y / 100);\n      const mouse_x = (event.x + container_left) / zoom + moveX,\n            mouse_y = (event.y + container_top) / zoom + moveY;\n\n      for (let i = 0; i < total; i++) {\n        if (!in_drop_area && mouse_x > children_offset_left[i] && mouse_x < children_offset_right[i]) {\n          let child_offset = {\n            left: children_offset_left[i],\n            right: children_offset_right[i]\n          };\n          const child_left_of_parent = i === 1 || !parent_is_root && document.getElementById(node_id).dataset.tag === refer.LEFT_NODE; // i = 1，即出现双侧拖拽时，左侧发生的拖拽 child_left_of_parent 必然为 true\n\n          const last_index = children_offset_vertical[i].length - 1;\n\n          if (mouse_y > children_offset_vertical[i][0] - 200 && mouse_y < children_offset_vertical[i][0]) {\n            // 优化体验，实际是显示的 2 倍\n            child_offset.top = children_offset_vertical[i][0] - 50;\n            child_offset.bottom = children_offset_vertical[i][0];\n            drawDragCanvas(ctx, theme, node_id, parent_offset, child_offset, child_left_of_parent);\n            target_id = children[i][0];\n            is_sibling = true;\n            return;\n          }\n\n          for (let j = 2; j < last_index + 1; j += 2) {\n            if (mouse_y > children_offset_vertical[i][j - 1] && mouse_y < children_offset_vertical[i][j]) {\n              child_offset.top = children_offset_vertical[i][j - 1];\n              child_offset.bottom = children_offset_vertical[i][j];\n              drawDragCanvas(ctx, theme, node_id, parent_offset, child_offset, child_left_of_parent);\n              target_id = children[i][j / 2];\n              is_sibling = true;\n              return;\n            }\n          }\n\n          if (mouse_y > children_offset_vertical[i][last_index] && mouse_y < children_offset_vertical[i][last_index] + 200) {\n            child_offset.top = children_offset_vertical[i][last_index];\n            child_offset.bottom = children_offset_vertical[i][last_index] + 50;\n            drawDragCanvas(ctx, theme, node_id, parent_offset, child_offset, child_left_of_parent);\n            target_id = children[i + 1] && children[i + 1][0];\n            is_sibling = true;\n            return;\n          }\n        }\n      }\n    }\n  }, {\n    type: 'dragover',\n    listener: event => {\n      event.preventDefault();\n    }\n  }, {\n    type: 'dragenter',\n    listener: event => {\n      if (event.target && event.target.dataset.tag === refer.DROP_AREA) {\n        event.target.parentNode.classList.add('ondrag');\n        target_id = event.target.parentNode.id;\n        is_sibling = false;\n        in_drop_area = true;\n      }\n    }\n  }, {\n    type: 'dragleave',\n    listener: event => {\n      if (event.target && event.target.dataset.tag === refer.DROP_AREA) {\n        event.target.parentNode.classList.remove('ondrag');\n        target_id = '';\n        is_sibling = false;\n        in_drop_area = false;\n      }\n    }\n  }, {\n    type: 'drop',\n    listener: event => {\n      event.target.parentNode.classList.remove('ondrag');\n\n      if (target_id !== '' && target_id !== node_id && target_id !== parent_id) {\n        moveNode(node_id, target_id, parent_id, is_sibling);\n      }\n    }\n  }, {\n    type: 'dragend',\n    listener: () => {\n      const ctx = drag_canvas.getContext('2d');\n      ctx.clearRect(0, 0, drag_canvas.width, drag_canvas.height);\n      container.removeEventListener('scroll', handleContainerScroll);\n    }\n  }];\n});","map":{"version":3,"sources":["/Users/liuhongyang/Desktop/RMind-develop/src/methods/getDragEvents.js"],"names":["refer","findNode","drawDragCanvas","getDomOffset","dom","left","offsetLeft","right","offsetWidth","top","offsetTop","bottom","offsetHeight","mindmap","drag_canvas","container","theme","mindmapHook","zoom","drag","moveNode","node_id","parent_id","target_id","is_sibling","children","children_offset_left","children_offset_right","children_offset_vertical","parent_offset","parent_is_root","container_left","container_top","container_width","container_height","in_drop_area","resetVariables","undefined","scrollLeft","scrollTop","handleContainerScroll","e","type","listener","event","addEventListener","target","dataset","tag","LEFT_NODE","RIGHT_NODE","id","parent","document","getElementById","map","child","children_offset","length","half","Math","trunc","slice","each","min","offset","max","reduce","flat_arr","cur","concat","ctx","getContext","clearRect","width","height","total","moveX","x","moveY","y","mouse_x","mouse_y","i","child_offset","child_left_of_parent","last_index","j","preventDefault","DROP_AREA","parentNode","classList","add","remove","removeEventListener"],"mappings":"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","sourcesContent":["import * as refer from '../statics/refer';\nimport { findNode } from './assistFunctions';\nimport { drawDragCanvas } from './drawCanvas';\n\nconst getDomOffset = dom => {\n    const left = dom.offsetLeft,\n        right = left + dom.offsetWidth,\n        top = dom.offsetTop,\n        bottom = top + dom.offsetHeight;\n    return { left, right, top, bottom };\n};\n\nexport default (mindmap, drag_canvas, container, theme, mindmapHook,zoom,drag) => {\n    const { moveNode } = mindmapHook;\n\n    let node_id, parent_id, target_id, is_sibling,\n        children, children_offset_left, children_offset_right, children_offset_vertical,\n        parent_offset, parent_is_root,\n        container_left, container_top,container_width,container_height,\n        in_drop_area;\n\n    const resetVariables = () => {\n        node_id = '';\n        parent_id = '';\n        target_id = '';\n        is_sibling = false;\n\n        children = [];\n        children_offset_left = [];\n        children_offset_right = [];\n        children_offset_vertical = [];\n\n        parent_offset = undefined;\n        parent_is_root = false;\n\n        container_left = container.scrollLeft;\n        container_top = container.scrollTop - 56;\n        container_width = container.offsetWidth;\n        container_height = container.offsetHeight;\n\n        in_drop_area = false;\n    };\n\n    const handleContainerScroll = (e) => {\n        \n        container_left = container.scrollLeft;\n        container_top = container.scrollTop - 56; // 56 是 container（Main 组件）顶部 margin 值        \n    };\n\n    return [\n        \n        {\n            type: 'dragstart',\n            listener: event => {\n                resetVariables();\n                container.addEventListener('scroll', handleContainerScroll);\n                if (event.target && (event.target.dataset.tag === refer.LEFT_NODE || event.target.dataset.tag === refer.RIGHT_NODE)) {\n                    node_id = event.target.id;\n                    parent_id = event.target.dataset.parent;\n                    const parent = findNode(mindmap, parent_id);\n                    parent_is_root = parent === mindmap;\n                    parent_offset = getDomOffset(document.getElementById(parent_id));\n                    children[0] = parent.children.map(child => child.id);\n                    let children_offset = [];\n                    children_offset[0] = children[0].map(node_id => getDomOffset(document.getElementById(node_id)));\n                    if (parent_is_root && mindmap.children.length > 3) {\n                        const half = Math.trunc(mindmap.children.length / 2);\n                        children = [children[0].slice(0, half), children[0].slice(half)];\n                        children_offset = [children_offset[0].slice(0, half), children_offset[0].slice(half)];\n                    }\n                    children_offset_left = children_offset.map(each => Math.min(...each.map(offset => offset.left)));\n                    children_offset_right = children_offset.map(each => Math.max(...each.map(offset => offset.right)));\n                    children_offset_vertical = children_offset.map(each => each.map(offset => [offset.top, offset.bottom]).reduce((flat_arr, cur) => flat_arr.concat(cur), []));\n                }\n            }\n        },\n        {\n            type: 'drag',\n            listener: event => {\n                const ctx = drag_canvas.getContext('2d');\n                ctx.clearRect(0, 0, drag_canvas.width, drag_canvas.height);\n                const total = children.length;\n                const moveX=-(container_width*drag.x/100)\n                const moveY=-(container_height*drag.y/100)\n                const mouse_x = (event.x + container_left)/zoom+moveX,\n                    mouse_y = (event.y + container_top)/zoom+moveY;\n                for (let i = 0; i < total; i++) {\n                    if (!in_drop_area && mouse_x > children_offset_left[i] && mouse_x < children_offset_right[i]) {\n                        let child_offset = { left: children_offset_left[i], right: children_offset_right[i] };\n                        const child_left_of_parent = i === 1 || (!parent_is_root && (document.getElementById(node_id).dataset.tag === refer.LEFT_NODE)); // i = 1，即出现双侧拖拽时，左侧发生的拖拽 child_left_of_parent 必然为 true\n                        const last_index = children_offset_vertical[i].length - 1;\n                        if (mouse_y > children_offset_vertical[i][0] - 200 && mouse_y < children_offset_vertical[i][0]) { // 优化体验，实际是显示的 2 倍\n                            child_offset.top = children_offset_vertical[i][0] - 50;\n                            child_offset.bottom = children_offset_vertical[i][0];\n                            drawDragCanvas(ctx, theme, node_id, parent_offset, child_offset, child_left_of_parent);\n                            target_id = children[i][0];\n                            is_sibling = true;\n                            return;\n                        }\n                        for (let j = 2; j < last_index + 1; j += 2) {\n                            if (mouse_y > children_offset_vertical[i][j - 1] && mouse_y < children_offset_vertical[i][j]) {\n                                child_offset.top = children_offset_vertical[i][j - 1];\n                                child_offset.bottom = children_offset_vertical[i][j];\n                                drawDragCanvas(ctx, theme, node_id, parent_offset, child_offset, child_left_of_parent);\n                                target_id = children[i][j / 2];\n                                is_sibling = true;\n                                return;\n                            }\n                        }\n                        if (mouse_y > children_offset_vertical[i][last_index] && mouse_y < children_offset_vertical[i][last_index] + 200) {\n                            child_offset.top = children_offset_vertical[i][last_index];\n                            child_offset.bottom = children_offset_vertical[i][last_index] + 50;\n                            drawDragCanvas(ctx, theme, node_id, parent_offset, child_offset, child_left_of_parent);\n                            target_id = children[i + 1] && children[i + 1][0];\n                            is_sibling = true;\n                            return;\n                        }\n                    }\n                }\n            }\n        },\n        {\n            type: 'dragover',\n            listener: event => {\n                event.preventDefault();\n            }\n        },\n        {\n            type: 'dragenter',\n            listener: event => {\n                if (event.target && event.target.dataset.tag === refer.DROP_AREA) {\n                    event.target.parentNode.classList.add('ondrag');\n                    target_id = event.target.parentNode.id;\n                    is_sibling = false;\n                    in_drop_area = true;\n                }\n            }\n        },\n        {\n            type: 'dragleave',\n            listener: event => {\n                if (event.target && event.target.dataset.tag === refer.DROP_AREA) {\n                    event.target.parentNode.classList.remove('ondrag');\n                    target_id = '';\n                    is_sibling = false;\n                    in_drop_area = false;\n                }\n            }\n        },\n        {\n            type: 'drop',\n            listener: event => {\n                event.target.parentNode.classList.remove('ondrag');\n                if (target_id !== '' && target_id !== node_id && target_id !== parent_id) {\n                    moveNode(node_id, target_id, parent_id, is_sibling);\n                }\n            }\n        },\n        {\n            type: 'dragend',\n            listener: () => {\n                const ctx = drag_canvas.getContext('2d');\n                ctx.clearRect(0, 0, drag_canvas.width, drag_canvas.height);\n                container.removeEventListener('scroll', handleContainerScroll);\n            }\n        }\n    ];\n}"]},"metadata":{},"sourceType":"module"}