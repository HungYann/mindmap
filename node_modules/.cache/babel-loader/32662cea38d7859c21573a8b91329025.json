{"ast":null,"code":"var _jsxFileName = \"/Users/liuhongyang/Documents/GitHub/repositories/mindmap/src/components/MindmapTitle/index.js\";\nimport React, { useEffect, useContext, useRef } from 'react';\nimport { css } from 'emotion';\nimport { context } from '../../context';\nimport { setTitle } from '../../context/reducer/global/actionCreator';\nimport * as refer from '../../statics/refer';\n\nconst MindmapTitle = () => {\n  const self = useRef();\n  const {\n    global: {\n      state: {\n        title\n      },\n      dispatch\n    }\n  } = useContext(context);\n  useEffect(() => {\n    document.title = `RMind - ${title}`;\n    localStorage.setItem('title', title);\n  }, [title]);\n\n  const handleKeydown = event => {\n    switch (event.key.toUpperCase()) {\n      case 'ESCAPE':\n        self.current.textContent = title;\n\n      case 'ENTER':\n        self.current.blur();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleBlur = () => {\n    let new_title = self.current.textContent.trim();\n\n    if (new_title === '') {\n      new_title = title;\n    }\n\n    if (new_title.length > 30) {\n      new_title = new_title.slice(0, 30);\n    }\n\n    self.current.textContent = new_title; // contentEditable 组件内容不会被自动更新\n\n    dispatch(setTitle(new_title));\n  };\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    ref: self,\n    className: wrapper,\n    contentEditable: \"true\",\n    suppressContentEditableWarning: \"true\",\n    spellCheck: \"false\",\n    onKeyDown: handleKeydown,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, title);\n};\n\nexport default MindmapTitle; // CSS\n\nconst wrapper = css`\nalign-self: center;\npadding: 0 10px; /* 两侧 padding 用于增大组件点击区域，避免将光标定位至首尾处时意外 blur */\ncolor: var(${refer.THEME_DARK});\nfont-size: 20px;\nfont-weight: 700;\nborder-bottom: 2px solid transparent;\noutline: none;\ntransition: 0.2s;\n\n&:read-write {\ncursor: edit;\n}\n\n&:focus {\nborder-bottom: 2px solid var(${refer.THEME_ASSIST});\n}\n`;","map":{"version":3,"sources":["/Users/liuhongyang/Documents/GitHub/repositories/mindmap/src/components/MindmapTitle/index.js"],"names":["React","useEffect","useContext","useRef","css","context","setTitle","refer","MindmapTitle","self","global","state","title","dispatch","document","localStorage","setItem","handleKeydown","event","key","toUpperCase","current","textContent","blur","handleBlur","new_title","trim","length","slice","wrapper","THEME_DARK","THEME_ASSIST"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,UAA1B,EAAsCC,MAAtC,QAAmD,OAAnD;AACA,SAAQC,GAAR,QAAkB,SAAlB;AACA,SAAQC,OAAR,QAAsB,eAAtB;AACA,SAAQC,QAAR,QAAuB,4CAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,qBAAvB;;AAEA,MAAMC,YAAY,GAAG,MAAM;AACvB,QAAMC,IAAI,GAAGN,MAAM,EAAnB;AACA,QAAM;AAACO,IAAAA,MAAM,EAAE;AAACC,MAAAA,KAAK,EAAE;AAACC,QAAAA;AAAD,OAAR;AAAiBC,MAAAA;AAAjB;AAAT,MAAuCX,UAAU,CAACG,OAAD,CAAvD;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,QAAQ,CAACF,KAAT,GAAkB,WAAUA,KAAM,EAAlC;AACAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BJ,KAA9B;AACH,GAHQ,EAGN,CAACA,KAAD,CAHM,CAAT;;AAKA,QAAMK,aAAa,GAAGC,KAAK,IAAI;AAC3B,YAAQA,KAAK,CAACC,GAAN,CAAUC,WAAV,EAAR;AACI,WAAK,QAAL;AACIX,QAAAA,IAAI,CAACY,OAAL,CAAaC,WAAb,GAA2BV,KAA3B;;AACJ,WAAK,OAAL;AACIH,QAAAA,IAAI,CAACY,OAAL,CAAaE,IAAb;AACA;;AACJ;AACI;AAPR;AASH,GAVD;;AAYA,QAAMC,UAAU,GAAG,MAAM;AACrB,QAAIC,SAAS,GAAGhB,IAAI,CAACY,OAAL,CAAaC,WAAb,CAAyBI,IAAzB,EAAhB;;AACA,QAAID,SAAS,KAAK,EAAlB,EAAsB;AAClBA,MAAAA,SAAS,GAAGb,KAAZ;AACH;;AACD,QAAIa,SAAS,CAACE,MAAV,GAAmB,EAAvB,EAA2B;AACvBF,MAAAA,SAAS,GAAGA,SAAS,CAACG,KAAV,CAAgB,CAAhB,EAAmB,EAAnB,CAAZ;AACH;;AACDnB,IAAAA,IAAI,CAACY,OAAL,CAAaC,WAAb,GAA2BG,SAA3B,CARqB,CAQiB;;AACtCZ,IAAAA,QAAQ,CAACP,QAAQ,CAACmB,SAAD,CAAT,CAAR;AACH,GAVD;;AAYA,sBAAQ;AAAM,IAAA,GAAG,EAAEhB,IAAX;AAAiB,IAAA,SAAS,EAAEoB,OAA5B;AAAqC,IAAA,eAAe,EAAC,MAArD;AAA4D,IAAA,8BAA8B,EAAC,MAA3F;AACM,IAAA,UAAU,EAAC,OADjB;AAEM,IAAA,SAAS,EAAEZ,aAFjB;AAEgC,IAAA,MAAM,EAAEO,UAFxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEqDZ,KAFrD,CAAR;AAGH,CApCD;;AAsCA,eAAeJ,YAAf,C,CAEA;;AACA,MAAMqB,OAAO,GAAGzB,GAAI;;;aAGPG,KAAK,CAACuB,UAAW;;;;;;;;;;;;+BAYCvB,KAAK,CAACwB,YAAa;;CAflD","sourcesContent":["import React, {useEffect, useContext, useRef} from 'react';\nimport {css} from 'emotion';\nimport {context} from '../../context';\nimport {setTitle} from '../../context/reducer/global/actionCreator';\nimport * as refer from '../../statics/refer';\n\nconst MindmapTitle = () => {\n    const self = useRef();\n    const {global: {state: {title}, dispatch}} = useContext(context);\n\n    useEffect(() => {\n        document.title = `RMind - ${title}`;\n        localStorage.setItem('title', title);\n    }, [title]);\n\n    const handleKeydown = event => {\n        switch (event.key.toUpperCase()) {\n            case 'ESCAPE':\n                self.current.textContent = title;\n            case 'ENTER':\n                self.current.blur();\n                break;\n            default:\n                break;\n        }\n    };\n\n    const handleBlur = () => {\n        let new_title = self.current.textContent.trim();\n        if (new_title === '') {\n            new_title = title;\n        }\n        if (new_title.length > 30) {\n            new_title = new_title.slice(0, 30);\n        }\n        self.current.textContent = new_title; // contentEditable 组件内容不会被自动更新\n        dispatch(setTitle(new_title));\n    };\n\n    return (<span ref={self} className={wrapper} contentEditable=\"true\" suppressContentEditableWarning=\"true\"\n                  spellCheck=\"false\"\n                  onKeyDown={handleKeydown} onBlur={handleBlur}>{title}</span>);\n};\n\nexport default MindmapTitle;\n\n// CSS\nconst wrapper = css`\nalign-self: center;\npadding: 0 10px; /* 两侧 padding 用于增大组件点击区域，避免将光标定位至首尾处时意外 blur */\ncolor: var(${refer.THEME_DARK});\nfont-size: 20px;\nfont-weight: 700;\nborder-bottom: 2px solid transparent;\noutline: none;\ntransition: 0.2s;\n\n&:read-write {\ncursor: edit;\n}\n\n&:focus {\nborder-bottom: 2px solid var(${refer.THEME_ASSIST});\n}\n`;"]},"metadata":{},"sourceType":"module"}