{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/liuhongyang/Desktop/RMind-develop/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Users/liuhongyang/Desktop/RMind-develop/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/liuhongyang/Desktop/RMind-develop/src/components/DragCanvas/index.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\nposition: absolute;\\ntop:0;\\nleft:0;\\nz-index: -1;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect, useRef, useContext } from 'react';\nimport { css } from 'emotion';\nimport useMindmap from '../../customHooks/useMindmap';\nimport useTheme from '../../customHooks/useTheme';\nimport getDragEvents from '../../methods/getDragEvents';\nimport { context } from '../../context';\nimport * as refer from '../../statics/refer';\n\nconst DragCanvas = ({\n  parent_ref,\n  container_ref,\n  mindmap\n}) => {\n  const self = useRef();\n\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        flag = _useState2[0],\n        setFlag = _useState2[1];\n\n  const _useTheme = useTheme(),\n        theme = _useTheme.theme;\n\n  const mindmapHook = useMindmap();\n\n  const _useContext = useContext(context),\n        gState = _useContext.global.state;\n\n  const zoom = gState.zoom,\n        x = gState.x,\n        y = gState.y;\n\n  const handleWindowResize = () => {\n    setFlag(Date.now());\n  };\n\n  useEffect(() => {\n    window.addEventListener('resize', handleWindowResize);\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, []);\n  useEffect(() => {\n    const handleDrag = getDragEvents(mindmap, self.current, container_ref.current, theme, mindmapHook, zoom, {\n      x,\n      y\n    });\n    handleDrag.forEach(event => document.querySelector(\"#\".concat(refer.MINDMAP_ID)).addEventListener(event.type, event.listener));\n    return () => {\n      handleDrag.forEach(event => document.querySelector(\"#\".concat(refer.MINDMAP_ID)).removeEventListener(event.type, event.listener));\n    };\n  }, [mindmap, theme, zoom, x, y]);\n  useEffect(() => {\n    const dom = self.current;\n    dom.width = parent_ref.current.offsetWidth;\n    dom.height = parent_ref.current.offsetHeight;\n  }, [mindmap, flag, gState.zoom]);\n  return React.createElement(\"canvas\", {\n    ref: self,\n    className: wrapper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  });\n};\n\nexport default DragCanvas; // CSS\n\nconst wrapper = css(_templateObject());","map":{"version":3,"sources":["/Users/liuhongyang/Desktop/RMind-develop/src/components/DragCanvas/index.js"],"names":["React","useState","useEffect","useRef","useContext","css","useMindmap","useTheme","getDragEvents","context","refer","DragCanvas","parent_ref","container_ref","mindmap","self","flag","setFlag","theme","mindmapHook","gState","global","state","zoom","x","y","handleWindowResize","Date","now","window","addEventListener","removeEventListener","handleDrag","current","forEach","event","document","querySelector","MINDMAP_ID","type","listener","dom","width","offsetWidth","height","offsetHeight","wrapper"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useContext } from 'react';\nimport { css } from 'emotion';\nimport useMindmap from '../../customHooks/useMindmap';\nimport useTheme from '../../customHooks/useTheme';\nimport getDragEvents from '../../methods/getDragEvents';\nimport { context } from '../../context'\nimport * as refer from '../../statics/refer';\n\nconst DragCanvas = ({ parent_ref, container_ref, mindmap }) => {\n    const self = useRef();\n    const [flag, setFlag] = useState(0);\n\n    const { theme } = useTheme();\n\n    const mindmapHook = useMindmap();\n\n    const { global: { state: gState } } = useContext(context);\n    const {zoom,x,y}=gState\n\n    const handleWindowResize = () => {\n        setFlag(Date.now());\n    };\n\n    useEffect(() => {\n        window.addEventListener('resize', handleWindowResize);\n        return () => {\n            window.removeEventListener('resize', handleWindowResize);\n        }\n    }, []);\n\n    useEffect(() => {\n        const handleDrag = getDragEvents(mindmap, self.current, container_ref.current, theme, mindmapHook,zoom,{x,y});\n        handleDrag.forEach(event => document.querySelector(`#${refer.MINDMAP_ID}`).addEventListener(event.type, event.listener));\n        return () => {\n            handleDrag.forEach(event => document.querySelector(`#${refer.MINDMAP_ID}`).removeEventListener(event.type, event.listener));\n        }\n    }, [mindmap, theme,zoom,x,y]);\n\n    useEffect(() => {\n        const dom = self.current;\n        dom.width = parent_ref.current.offsetWidth;\n        dom.height = parent_ref.current.offsetHeight;\n    }, [mindmap, flag, gState.zoom]);\n\n    return (<canvas ref={self} className={wrapper} />);\n};\n\nexport default DragCanvas;\n\n// CSS\nconst wrapper = css`\nposition: absolute;\ntop:0;\nleft:0;\nz-index: -1;\n`;"]},"metadata":{},"sourceType":"module"}