{"ast":null,"code":"import*as actionTypes from'./actionTypes';import defaultMindmap from'../../../statics/defaultMindmap';import{findNode,deepCopy,setShowChildrenTrue}from'../../../methods/assistFunctions';export var defaultValue_mindmap=JSON.parse(localStorage.getItem('mindmap'))||defaultMindmap;export default(function(mindmap,action){switch(action.type){case actionTypes.TOGGLE_CHILDREN:{var new_mindmap=deepCopy(mindmap),node_found=findNode(new_mindmap,action.data.node_id);if(node_found.children.length>0&&node_found!==new_mindmap){Object.assign(node_found,action.data.node);}return new_mindmap;}case actionTypes.ADD_CHILD:{var _new_mindmap=deepCopy(mindmap),_node_found=findNode(_new_mindmap,action.data.node_id);_node_found.children.push(action.data.node);return _new_mindmap;}case actionTypes.ADD_SIBLING:{var _new_mindmap2=deepCopy(mindmap);if(action.data.parent_id){var _node_found2=findNode(_new_mindmap2,action.data.parent_id);var insert_index=_node_found2.children.findIndex(function(node){return node.id===action.data.node_id;})+1;_node_found2.children.splice(insert_index,0,action.data.node);}return _new_mindmap2;}case actionTypes.MOVE_NODE:{var _new_mindmap3=deepCopy(mindmap),parent=findNode(_new_mindmap3,action.data.parent_id),node_index=parent.children.findIndex(function(node){return node.id===action.data.node_id;}),node_copy=parent.children[node_index];parent.children.splice(node_index,1);if(action.data.is_sibling){var target_index=parent.children.findIndex(function(node){return node.id===action.data.target_id;})+1||parent.children.length+1;parent.children.splice(target_index-1,0,node_copy);}else{var target_node=findNode(_new_mindmap3,action.data.target_id);target_node.children.push(node_copy);}return _new_mindmap3;}case actionTypes.CHANGE_TEXT:{var _new_mindmap4=deepCopy(mindmap),_node_found3=findNode(_new_mindmap4,action.data.node_id);Object.assign(_node_found3,action.data.node);return _new_mindmap4;}case actionTypes.DELETE_NODE:{var _new_mindmap5=deepCopy(mindmap);if(action.data.parent_id){var _node_found4=findNode(_new_mindmap5,action.data.parent_id);var delete_index=_node_found4.children.findIndex(function(node){return node.id===action.data.node_id;});_node_found4.children.splice(delete_index,1);}return _new_mindmap5;}case actionTypes.EXPAND_ALL:{var _new_mindmap6=deepCopy(mindmap);var _node_found5=findNode(_new_mindmap6,action.data.node_id);setShowChildrenTrue(_node_found5);return _new_mindmap6;}case actionTypes.SET_MINDMAP:{return action.data.mindmap;}default:return mindmap;}});","map":{"version":3,"sources":["/Users/liuhongyang/Documents/GitHub/repositories/mindmap/src/context/reducer/mindmap/index.js"],"names":["actionTypes","defaultMindmap","findNode","deepCopy","setShowChildrenTrue","defaultValue_mindmap","JSON","parse","localStorage","getItem","mindmap","action","type","TOGGLE_CHILDREN","new_mindmap","node_found","data","node_id","children","length","Object","assign","node","ADD_CHILD","push","ADD_SIBLING","parent_id","insert_index","findIndex","id","splice","MOVE_NODE","parent","node_index","node_copy","is_sibling","target_index","target_id","target_node","CHANGE_TEXT","DELETE_NODE","delete_index","EXPAND_ALL","SET_MINDMAP"],"mappings":"AAAA,MAAO,GAAKA,CAAAA,WAAZ,KAA6B,eAA7B,CACA,MAAOC,CAAAA,cAAP,KAA2B,iCAA3B,CACA,OAAQC,QAAR,CAAkBC,QAAlB,CAA4BC,mBAA5B,KAAsD,kCAAtD,CAEA,MAAO,IAAMC,CAAAA,oBAAoB,CAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,GAA+CR,cAA5E,CAEP,eAAe,SAACS,OAAD,CAAUC,MAAV,CAAqB,CAChC,OAAQA,MAAM,CAACC,IAAf,EACI,IAAKZ,CAAAA,WAAW,CAACa,eAAjB,CAAkC,CAC9B,GAAMC,CAAAA,WAAW,CAAGX,QAAQ,CAACO,OAAD,CAA5B,CACIK,UAAU,CAAGb,QAAQ,CAACY,WAAD,CAAcH,MAAM,CAACK,IAAP,CAAYC,OAA1B,CADzB,CAEA,GAAIF,UAAU,CAACG,QAAX,CAAoBC,MAApB,CAA6B,CAA7B,EAAkCJ,UAAU,GAAKD,WAArD,CAAkE,CAC9DM,MAAM,CAACC,MAAP,CAAcN,UAAd,CAA0BJ,MAAM,CAACK,IAAP,CAAYM,IAAtC,EACH,CACD,MAAOR,CAAAA,WAAP,CACH,CACD,IAAKd,CAAAA,WAAW,CAACuB,SAAjB,CAA4B,CACxB,GAAMT,CAAAA,YAAW,CAAGX,QAAQ,CAACO,OAAD,CAA5B,CACIK,WAAU,CAAGb,QAAQ,CAACY,YAAD,CAAcH,MAAM,CAACK,IAAP,CAAYC,OAA1B,CADzB,CAEAF,WAAU,CAACG,QAAX,CAAoBM,IAApB,CAAyBb,MAAM,CAACK,IAAP,CAAYM,IAArC,EACA,MAAOR,CAAAA,YAAP,CACH,CACD,IAAKd,CAAAA,WAAW,CAACyB,WAAjB,CAA8B,CAC1B,GAAMX,CAAAA,aAAW,CAAGX,QAAQ,CAACO,OAAD,CAA5B,CACA,GAAIC,MAAM,CAACK,IAAP,CAAYU,SAAhB,CAA2B,CACvB,GAAMX,CAAAA,YAAU,CAAGb,QAAQ,CAACY,aAAD,CAAcH,MAAM,CAACK,IAAP,CAAYU,SAA1B,CAA3B,CACA,GAAMC,CAAAA,YAAY,CAAGZ,YAAU,CAACG,QAAX,CAAoBU,SAApB,CAA8B,SAAAN,IAAI,QAAIA,CAAAA,IAAI,CAACO,EAAL,GAAYlB,MAAM,CAACK,IAAP,CAAYC,OAA5B,EAAlC,EAAyE,CAA9F,CACAF,YAAU,CAACG,QAAX,CAAoBY,MAApB,CAA2BH,YAA3B,CAAyC,CAAzC,CAA4ChB,MAAM,CAACK,IAAP,CAAYM,IAAxD,EACH,CACD,MAAOR,CAAAA,aAAP,CACH,CACD,IAAKd,CAAAA,WAAW,CAAC+B,SAAjB,CAA4B,CACxB,GAAMjB,CAAAA,aAAW,CAAGX,QAAQ,CAACO,OAAD,CAA5B,CACIsB,MAAM,CAAG9B,QAAQ,CAACY,aAAD,CAAcH,MAAM,CAACK,IAAP,CAAYU,SAA1B,CADrB,CAEIO,UAAU,CAAGD,MAAM,CAACd,QAAP,CAAgBU,SAAhB,CAA0B,SAAAN,IAAI,QAAIA,CAAAA,IAAI,CAACO,EAAL,GAAYlB,MAAM,CAACK,IAAP,CAAYC,OAA5B,EAA9B,CAFjB,CAGIiB,SAAS,CAAGF,MAAM,CAACd,QAAP,CAAgBe,UAAhB,CAHhB,CAIAD,MAAM,CAACd,QAAP,CAAgBY,MAAhB,CAAuBG,UAAvB,CAAmC,CAAnC,EACA,GAAItB,MAAM,CAACK,IAAP,CAAYmB,UAAhB,CAA4B,CACxB,GAAMC,CAAAA,YAAY,CAAGJ,MAAM,CAACd,QAAP,CAAgBU,SAAhB,CAA0B,SAAAN,IAAI,QAAIA,CAAAA,IAAI,CAACO,EAAL,GAAYlB,MAAM,CAACK,IAAP,CAAYqB,SAA5B,EAA9B,EAAuE,CAAvE,EAA4EL,MAAM,CAACd,QAAP,CAAgBC,MAAhB,CAAyB,CAA1H,CACAa,MAAM,CAACd,QAAP,CAAgBY,MAAhB,CAAuBM,YAAY,CAAG,CAAtC,CAAyC,CAAzC,CAA4CF,SAA5C,EACH,CAHD,IAGO,CACH,GAAMI,CAAAA,WAAW,CAAGpC,QAAQ,CAACY,aAAD,CAAcH,MAAM,CAACK,IAAP,CAAYqB,SAA1B,CAA5B,CACAC,WAAW,CAACpB,QAAZ,CAAqBM,IAArB,CAA0BU,SAA1B,EACH,CACD,MAAOpB,CAAAA,aAAP,CACH,CACD,IAAKd,CAAAA,WAAW,CAACuC,WAAjB,CAA8B,CAC1B,GAAMzB,CAAAA,aAAW,CAAGX,QAAQ,CAACO,OAAD,CAA5B,CACIK,YAAU,CAAGb,QAAQ,CAACY,aAAD,CAAcH,MAAM,CAACK,IAAP,CAAYC,OAA1B,CADzB,CAEAG,MAAM,CAACC,MAAP,CAAcN,YAAd,CAA0BJ,MAAM,CAACK,IAAP,CAAYM,IAAtC,EACA,MAAOR,CAAAA,aAAP,CACH,CACD,IAAKd,CAAAA,WAAW,CAACwC,WAAjB,CAA8B,CAC1B,GAAM1B,CAAAA,aAAW,CAAGX,QAAQ,CAACO,OAAD,CAA5B,CACA,GAAIC,MAAM,CAACK,IAAP,CAAYU,SAAhB,CAA2B,CACvB,GAAMX,CAAAA,YAAU,CAAGb,QAAQ,CAACY,aAAD,CAAcH,MAAM,CAACK,IAAP,CAAYU,SAA1B,CAA3B,CACA,GAAMe,CAAAA,YAAY,CAAG1B,YAAU,CAACG,QAAX,CAAoBU,SAApB,CAA8B,SAAAN,IAAI,QAAIA,CAAAA,IAAI,CAACO,EAAL,GAAYlB,MAAM,CAACK,IAAP,CAAYC,OAA5B,EAAlC,CAArB,CACAF,YAAU,CAACG,QAAX,CAAoBY,MAApB,CAA2BW,YAA3B,CAAyC,CAAzC,EACH,CACD,MAAO3B,CAAAA,aAAP,CACH,CACD,IAAKd,CAAAA,WAAW,CAAC0C,UAAjB,CAA6B,CACzB,GAAM5B,CAAAA,aAAW,CAAGX,QAAQ,CAACO,OAAD,CAA5B,CACA,GAAMK,CAAAA,YAAU,CAAGb,QAAQ,CAACY,aAAD,CAAcH,MAAM,CAACK,IAAP,CAAYC,OAA1B,CAA3B,CACAb,mBAAmB,CAACW,YAAD,CAAnB,CACA,MAAOD,CAAAA,aAAP,CACH,CACD,IAAKd,CAAAA,WAAW,CAAC2C,WAAjB,CAA8B,CAC1B,MAAOhC,CAAAA,MAAM,CAACK,IAAP,CAAYN,OAAnB,CACH,CACD,QACI,MAAOA,CAAAA,OAAP,CAhER,CAkEH,CAnED","sourcesContent":["import * as actionTypes from './actionTypes';\nimport defaultMindmap from '../../../statics/defaultMindmap';\nimport {findNode, deepCopy, setShowChildrenTrue} from '../../../methods/assistFunctions';\n\nexport const defaultValue_mindmap = JSON.parse(localStorage.getItem('mindmap')) || defaultMindmap;\n\nexport default (mindmap, action) => {\n    switch (action.type) {\n        case actionTypes.TOGGLE_CHILDREN: {\n            const new_mindmap = deepCopy(mindmap),\n                node_found = findNode(new_mindmap, action.data.node_id);\n            if (node_found.children.length > 0 && node_found !== new_mindmap) {\n                Object.assign(node_found, action.data.node);\n            }\n            return new_mindmap;\n        }\n        case actionTypes.ADD_CHILD: {\n            const new_mindmap = deepCopy(mindmap),\n                node_found = findNode(new_mindmap, action.data.node_id);\n            node_found.children.push(action.data.node);\n            return new_mindmap;\n        }\n        case actionTypes.ADD_SIBLING: {\n            const new_mindmap = deepCopy(mindmap);\n            if (action.data.parent_id) {\n                const node_found = findNode(new_mindmap, action.data.parent_id);\n                const insert_index = node_found.children.findIndex(node => node.id === action.data.node_id) + 1;\n                node_found.children.splice(insert_index, 0, action.data.node);\n            }\n            return new_mindmap;\n        }\n        case actionTypes.MOVE_NODE: {\n            const new_mindmap = deepCopy(mindmap),\n                parent = findNode(new_mindmap, action.data.parent_id),\n                node_index = parent.children.findIndex(node => node.id === action.data.node_id),\n                node_copy = parent.children[node_index];\n            parent.children.splice(node_index, 1);\n            if (action.data.is_sibling) {\n                const target_index = parent.children.findIndex(node => node.id === action.data.target_id) + 1 || parent.children.length + 1;\n                parent.children.splice(target_index - 1, 0, node_copy);\n            } else {\n                const target_node = findNode(new_mindmap, action.data.target_id);\n                target_node.children.push(node_copy);\n            }\n            return new_mindmap;\n        }\n        case actionTypes.CHANGE_TEXT: {\n            const new_mindmap = deepCopy(mindmap),\n                node_found = findNode(new_mindmap, action.data.node_id);\n            Object.assign(node_found, action.data.node);\n            return new_mindmap;\n        }\n        case actionTypes.DELETE_NODE: {\n            const new_mindmap = deepCopy(mindmap);\n            if (action.data.parent_id) {\n                const node_found = findNode(new_mindmap, action.data.parent_id);\n                const delete_index = node_found.children.findIndex(node => node.id === action.data.node_id);\n                node_found.children.splice(delete_index, 1);\n            }\n            return new_mindmap;\n        }\n        case actionTypes.EXPAND_ALL: {\n            const new_mindmap = deepCopy(mindmap);\n            const node_found = findNode(new_mindmap, action.data.node_id);\n            setShowChildrenTrue(node_found);\n            return new_mindmap;\n        }\n        case actionTypes.SET_MINDMAP: {\n            return action.data.mindmap;\n        }\n        default:\n            return mindmap;\n    }\n};"]},"metadata":{},"sourceType":"module"}