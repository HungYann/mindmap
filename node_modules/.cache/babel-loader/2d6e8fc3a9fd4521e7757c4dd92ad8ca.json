{"ast":null,"code":"import md5 from'md5';import*as refer from'../statics/refer';var getLayerAndText=function getLayerAndText(line,format){var layer,text;switch(format){case'MD':{if(line.match(/^#{1,6} /)){layer=line.match(/^#{1,6} /)[0].length-2;text=line.replace(/^#{1,6} /,'');}else if(line.match(/^\\s*[-*] /)){layer=line.match(/^\\s*[-*] /)[0].length+4;text=line.replace(/^\\s*[-*] /,'');}return{layer:layer,text:text};}case'TXT':{layer=line.match(/^\\s*/)[0].length;text=line.replace(/^\\s*/,'');return{layer:layer,text:text};}default:return{layer:layer,text:text};}};var buildNodeFromText=function buildNodeFromText(data_array,format,cur_layer){var cur_text=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'';if(data_array.length===0&&cur_layer===-1){return;}if(cur_layer===-1){var root_data=getLayerAndText(data_array.shift(),format);cur_layer=root_data.layer||0;// 一定的鲁棒性\ncur_text=root_data.text||'未知数据';}var cur_node={id:cur_layer===0?refer.ROOT_NODE_ID:md5(''+Date.now()+Math.random()+cur_text),text:cur_text,showChildren:true,children:[]};while(data_array.length>0){var _getLayerAndText=getLayerAndText(data_array[0],format),layer=_getLayerAndText.layer,text=_getLayerAndText.text;if(layer<=cur_layer){break;}data_array.shift();if(layer){// 排除掉无法匹配的情况\ncur_node.children.push(buildNodeFromText(data_array,format,layer,text));}}return cur_node;};var copyNodeData=function copyNodeData(format,target_node,source_node,is_root_node){switch(format){case'KM':target_node.id=is_root_node?refer.ROOT_NODE_ID:source_node.data.id;target_node.text=source_node.data.text;target_node.showChildren=source_node.data.expandState!=='collapse';target_node.children=source_node.children.map(function(child){return copyNodeData(format,{},child);});return target_node;default:return;}};var buildNodeFromJSON=function buildNodeFromJSON(json,format){switch(format){case'RMF':return JSON.parse(json);case'KM':{var km_mindmap=JSON.parse(json);return copyNodeData(format,{},km_mindmap.root,true);}default:return;}};export default(function(import_data,format){var mindmap;switch(format){case'MD':case'TXT':var data_array=import_data.split('\\n').filter(function(line){return line;});mindmap=buildNodeFromText(data_array,format,-1);break;default:mindmap=buildNodeFromJSON(import_data,format);break;}return mindmap;});","map":{"version":3,"sources":["/Users/liuhongyang/Documents/GitHub/repositories/mindmap/src/methods/mindmapParser.js"],"names":["md5","refer","getLayerAndText","line","format","layer","text","match","length","replace","buildNodeFromText","data_array","cur_layer","cur_text","root_data","shift","cur_node","id","ROOT_NODE_ID","Date","now","Math","random","showChildren","children","push","copyNodeData","target_node","source_node","is_root_node","data","expandState","map","child","buildNodeFromJSON","json","JSON","parse","km_mindmap","root","import_data","mindmap","split","filter"],"mappings":"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","sourcesContent":["import md5 from 'md5';\nimport * as refer from '../statics/refer';\n\nconst getLayerAndText = (line, format) => {\n    let layer, text;\n    switch (format) {\n        case 'MD': {\n            if (line.match(/^#{1,6} /)) {\n                layer = line.match(/^#{1,6} /)[0].length - 2;\n                text = line.replace(/^#{1,6} /, '');\n            } else if (line.match(/^\\s*[-*] /)) {\n                layer = line.match(/^\\s*[-*] /)[0].length + 4;\n                text = line.replace(/^\\s*[-*] /, '');\n            }\n            return {layer, text};\n        }\n        case 'TXT': {\n            layer = line.match(/^\\s*/)[0].length;\n            text = line.replace(/^\\s*/, '');\n            return {layer, text};\n        }\n        default:\n            return {layer, text};\n    }\n};\n\nconst buildNodeFromText = (data_array, format, cur_layer, cur_text = '') => {\n    if (data_array.length === 0 && cur_layer === -1) {\n        return;\n    }\n    if (cur_layer === -1) {\n        const root_data = getLayerAndText(data_array.shift(), format);\n        cur_layer = root_data.layer || 0; // 一定的鲁棒性\n        cur_text = root_data.text || '未知数据';\n    }\n    const cur_node = {\n        id: cur_layer === 0 ? refer.ROOT_NODE_ID : md5('' + Date.now() + Math.random() + cur_text),\n        text: cur_text,\n        showChildren: true,\n        children: []\n    };\n    while (data_array.length > 0) {\n        const {layer, text} = getLayerAndText(data_array[0], format);\n        if (layer <= cur_layer) {\n            break;\n        }\n        data_array.shift();\n        if (layer) { // 排除掉无法匹配的情况\n            cur_node.children.push(buildNodeFromText(data_array, format, layer, text));\n        }\n    }\n    return cur_node;\n};\n\nconst copyNodeData = (format, target_node, source_node, is_root_node) => {\n    switch (format) {\n        case 'KM':\n            target_node.id = is_root_node ? refer.ROOT_NODE_ID : source_node.data.id;\n            target_node.text = source_node.data.text;\n            target_node.showChildren = source_node.data.expandState !== 'collapse';\n            target_node.children = source_node.children.map(child => copyNodeData(format, {}, child));\n            return target_node;\n        default:\n            return;\n    }\n};\n\nconst buildNodeFromJSON = (json, format) => {\n    switch (format) {\n        case 'RMF':\n            return JSON.parse(json);\n        case 'KM': {\n            let km_mindmap = JSON.parse(json);\n            return copyNodeData(format, {}, km_mindmap.root, true);\n        }\n        default:\n            return;\n    }\n};\n\nexport default (import_data, format) => {\n    let mindmap;\n    switch (format) {\n        case 'MD':\n        case 'TXT':\n            const data_array = import_data.split('\\n').filter(line => line);\n            mindmap = buildNodeFromText(data_array, format, -1);\n            break;\n        default:\n            mindmap = buildNodeFromJSON(import_data, format);\n            break;\n    }\n    return mindmap;\n}"]},"metadata":{},"sourceType":"module"}