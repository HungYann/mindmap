{"ast":null,"code":"const exportNodeToText = (node, layer, format) => {\n  switch (format) {\n    case 'MD':\n      if (layer < 6) {\n        return '#'.repeat(layer + 1) + ' ' + node.text;\n      }\n\n      return '\\t'.repeat(layer - 6) + '- ' + node.text;\n\n    case 'TXT':\n      return '\\t'.repeat(layer) + node.text;\n\n    default:\n      return;\n  }\n};\n\nconst exportMindmapToText = (mindmap, format) => {\n  let lines = [];\n\n  const dfs = (node, layer, format) => {\n    if (!node) {\n      return;\n    }\n\n    lines.push(exportNodeToText(node, layer, format));\n    node.children.forEach(child => {\n      dfs(child, layer + 1, format);\n    });\n  };\n\n  dfs(mindmap, 0, format);\n  return lines.join('\\n');\n};\n\nconst copyNodeData = (format, target_node, source_node) => {\n  switch (format) {\n    case 'KM':\n      target_node.data = {};\n      target_node.data.id = source_node.id;\n      target_node.data.created = Date.now();\n      target_node.data.text = source_node.text;\n      target_node.data.expandState = source_node.showChildren ? 'expand' : 'collapse';\n      target_node.children = source_node.children.map(child => copyNodeData(format, {}, child));\n      return target_node;\n\n    default:\n      return;\n  }\n};\n\nconst exportMindmapToJSON = (mindmap, format) => {\n  switch (format) {\n    case 'KM':\n      const km_mindmap = {\n        root: copyNodeData(format, {}, mindmap)\n      };\n      return JSON.stringify(km_mindmap);\n\n    default:\n      return;\n  }\n};\n\nexport default ((mindmap, format) => {\n  let export_data;\n\n  switch (format) {\n    case 'MD':\n    case 'TXT':\n      export_data = exportMindmapToText(mindmap, format);\n      break;\n\n    default:\n      export_data = exportMindmapToJSON(mindmap, format);\n      break;\n  }\n\n  return export_data;\n});","map":{"version":3,"sources":["/Users/liuhongyang/Documents/GitHub/repositories/mindmap/src/methods/mindmapExporter.js"],"names":["exportNodeToText","node","layer","format","repeat","text","exportMindmapToText","mindmap","lines","dfs","push","children","forEach","child","join","copyNodeData","target_node","source_node","data","id","created","Date","now","expandState","showChildren","map","exportMindmapToJSON","km_mindmap","root","JSON","stringify","export_data"],"mappings":"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","sourcesContent":["const exportNodeToText = (node, layer, format) => {\n    switch (format) {\n        case 'MD':\n            if (layer < 6) {\n                return '#'.repeat(layer + 1) + ' ' + node.text;\n            }\n            return '\\t'.repeat(layer - 6) + '- ' + node.text;\n        case 'TXT':\n            return '\\t'.repeat(layer) + node.text;\n        default:\n            return;\n    }\n};\n\nconst exportMindmapToText = (mindmap, format) => {\n    let lines = [];\n    const dfs = (node, layer, format) => {\n        if (!node) {\n            return;\n        }\n        lines.push(exportNodeToText(node, layer, format));\n        node.children.forEach(child => {\n            dfs(child, layer + 1, format)\n        });\n    };\n    dfs(mindmap, 0, format);\n    return lines.join('\\n');\n};\n\nconst copyNodeData = (format, target_node, source_node) => {\n    switch (format) {\n        case 'KM':\n            target_node.data = {};\n            target_node.data.id = source_node.id;\n            target_node.data.created = Date.now();\n            target_node.data.text = source_node.text;\n            target_node.data.expandState = source_node.showChildren ? 'expand' : 'collapse';\n            target_node.children = source_node.children.map(child => copyNodeData(format, {}, child));\n            return target_node;\n        default:\n            return;\n    }\n};\n\nconst exportMindmapToJSON = (mindmap, format) => {\n    switch (format) {\n        case 'KM':\n            const km_mindmap = {root: copyNodeData(format, {}, mindmap)};\n            return JSON.stringify(km_mindmap);\n        default:\n            return;\n    }\n};\n\nexport default (mindmap, format) => {\n    let export_data;\n    switch (format) {\n        case 'MD':\n        case 'TXT':\n            export_data = exportMindmapToText(mindmap, format);\n            break;\n        default:\n            export_data = exportMindmapToJSON(mindmap, format);\n            break;\n    }\n    return export_data;\n}\n"]},"metadata":{},"sourceType":"module"}