{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport defaultMindmap from '../../../statics/defaultMindmap';\nimport { findNode, deepCopy, setShowChildrenTrue } from '../../../methods/assistFunctions';\nexport const defaultValue_mindmap = JSON.parse(localStorage.getItem('mindmap')) || defaultMindmap;\nexport default ((mindmap, action) => {\n  switch (action.type) {\n    case actionTypes.TOGGLE_CHILDREN:\n      {\n        const new_mindmap = deepCopy(mindmap),\n              node_found = findNode(new_mindmap, action.data.node_id);\n\n        if (node_found.children.length > 0 && node_found !== new_mindmap) {\n          Object.assign(node_found, action.data.node);\n        }\n\n        return new_mindmap;\n      }\n\n    case actionTypes.ADD_CHILD:\n      {\n        const new_mindmap = deepCopy(mindmap),\n              node_found = findNode(new_mindmap, action.data.node_id);\n        node_found.children.push(action.data.node);\n        return new_mindmap;\n      }\n\n    case actionTypes.ADD_SIBLING:\n      {\n        const new_mindmap = deepCopy(mindmap);\n\n        if (action.data.parent_id) {\n          const node_found = findNode(new_mindmap, action.data.parent_id);\n          const insert_index = node_found.children.findIndex(node => node.id === action.data.node_id) + 1;\n          node_found.children.splice(insert_index, 0, action.data.node);\n        }\n\n        return new_mindmap;\n      }\n\n    case actionTypes.MOVE_NODE:\n      {\n        const new_mindmap = deepCopy(mindmap),\n              parent = findNode(new_mindmap, action.data.parent_id),\n              node_index = parent.children.findIndex(node => node.id === action.data.node_id),\n              node_copy = parent.children[node_index];\n        parent.children.splice(node_index, 1);\n\n        if (action.data.is_sibling) {\n          const target_index = parent.children.findIndex(node => node.id === action.data.target_id) + 1 || parent.children.length + 1;\n          parent.children.splice(target_index - 1, 0, node_copy);\n        } else {\n          const target_node = findNode(new_mindmap, action.data.target_id);\n          target_node.children.push(node_copy);\n        }\n\n        return new_mindmap;\n      }\n\n    case actionTypes.CHANGE_TEXT:\n      {\n        const new_mindmap = deepCopy(mindmap),\n              node_found = findNode(new_mindmap, action.data.node_id);\n        Object.assign(node_found, action.data.node);\n        return new_mindmap;\n      }\n\n    case actionTypes.DELETE_NODE:\n      {\n        const new_mindmap = deepCopy(mindmap);\n\n        if (action.data.parent_id) {\n          const node_found = findNode(new_mindmap, action.data.parent_id);\n          const delete_index = node_found.children.findIndex(node => node.id === action.data.node_id);\n          node_found.children.splice(delete_index, 1);\n        }\n\n        return new_mindmap;\n      }\n\n    case actionTypes.EXPAND_ALL:\n      {\n        const new_mindmap = deepCopy(mindmap);\n        const node_found = findNode(new_mindmap, action.data.node_id);\n        setShowChildrenTrue(node_found);\n        return new_mindmap;\n      }\n\n    case actionTypes.SET_MINDMAP:\n      {\n        return action.data.mindmap;\n      }\n\n    default:\n      return mindmap;\n  }\n});","map":{"version":3,"sources":["/Users/liuhongyang/Documents/GitHub/repositories/mindmap/src/context/reducer/mindmap/index.js"],"names":["actionTypes","defaultMindmap","findNode","deepCopy","setShowChildrenTrue","defaultValue_mindmap","JSON","parse","localStorage","getItem","mindmap","action","type","TOGGLE_CHILDREN","new_mindmap","node_found","data","node_id","children","length","Object","assign","node","ADD_CHILD","push","ADD_SIBLING","parent_id","insert_index","findIndex","id","splice","MOVE_NODE","parent","node_index","node_copy","is_sibling","target_index","target_id","target_node","CHANGE_TEXT","DELETE_NODE","delete_index","EXPAND_ALL","SET_MINDMAP"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport defaultMindmap from '../../../statics/defaultMindmap';\nimport {findNode, deepCopy, setShowChildrenTrue} from '../../../methods/assistFunctions';\n\nexport const defaultValue_mindmap = JSON.parse(localStorage.getItem('mindmap')) || defaultMindmap;\n\nexport default (mindmap, action) => {\n    switch (action.type) {\n        case actionTypes.TOGGLE_CHILDREN: {\n            const new_mindmap = deepCopy(mindmap),\n                node_found = findNode(new_mindmap, action.data.node_id);\n            if (node_found.children.length > 0 && node_found !== new_mindmap) {\n                Object.assign(node_found, action.data.node);\n            }\n            return new_mindmap;\n        }\n        case actionTypes.ADD_CHILD: {\n            const new_mindmap = deepCopy(mindmap),\n                node_found = findNode(new_mindmap, action.data.node_id);\n            node_found.children.push(action.data.node);\n            return new_mindmap;\n        }\n        case actionTypes.ADD_SIBLING: {\n            const new_mindmap = deepCopy(mindmap);\n            if (action.data.parent_id) {\n                const node_found = findNode(new_mindmap, action.data.parent_id);\n                const insert_index = node_found.children.findIndex(node => node.id === action.data.node_id) + 1;\n                node_found.children.splice(insert_index, 0, action.data.node);\n            }\n            return new_mindmap;\n        }\n        case actionTypes.MOVE_NODE: {\n            const new_mindmap = deepCopy(mindmap),\n                parent = findNode(new_mindmap, action.data.parent_id),\n                node_index = parent.children.findIndex(node => node.id === action.data.node_id),\n                node_copy = parent.children[node_index];\n            parent.children.splice(node_index, 1);\n            if (action.data.is_sibling) {\n                const target_index = parent.children.findIndex(node => node.id === action.data.target_id) + 1 || parent.children.length + 1;\n                parent.children.splice(target_index - 1, 0, node_copy);\n            } else {\n                const target_node = findNode(new_mindmap, action.data.target_id);\n                target_node.children.push(node_copy);\n            }\n            return new_mindmap;\n        }\n        case actionTypes.CHANGE_TEXT: {\n            const new_mindmap = deepCopy(mindmap),\n                node_found = findNode(new_mindmap, action.data.node_id);\n            Object.assign(node_found, action.data.node);\n            return new_mindmap;\n        }\n        case actionTypes.DELETE_NODE: {\n            const new_mindmap = deepCopy(mindmap);\n            if (action.data.parent_id) {\n                const node_found = findNode(new_mindmap, action.data.parent_id);\n                const delete_index = node_found.children.findIndex(node => node.id === action.data.node_id);\n                node_found.children.splice(delete_index, 1);\n            }\n            return new_mindmap;\n        }\n        case actionTypes.EXPAND_ALL: {\n            const new_mindmap = deepCopy(mindmap);\n            const node_found = findNode(new_mindmap, action.data.node_id);\n            setShowChildrenTrue(node_found);\n            return new_mindmap;\n        }\n        case actionTypes.SET_MINDMAP: {\n            return action.data.mindmap;\n        }\n        default:\n            return mindmap;\n    }\n};"]},"metadata":{},"sourceType":"module"}