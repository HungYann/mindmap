{"ast":null,"code":"import _slicedToArray from\"/Users/liuhongyang/Documents/GitHub/repositories/mindmap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";export var handlePropagation=function handlePropagation(event){event.stopPropagation();};export var deepCopy=function deepCopy(input){// 简单的递归深拷贝，只考虑 context 中 state 的复制，因此没有处理 function 等\nif(input instanceof Object){if(Array.isArray(input)){return input.map(deepCopy);}var output={};Object.entries(input).forEach(function(_ref){var _ref2=_slicedToArray(_ref,2),key=_ref2[0],value=_ref2[1];output[key]=deepCopy(value);});return output;}return input;};export var findNode=function findNode(node,search_id){if(node.id===search_id){return node;}return node.children.map(function(child){return findNode(child,search_id);}).find(function(item){return item;});};export var setShowChildrenTrue=function setShowChildrenTrue(node){node.showChildren=true;node.children.forEach(setShowChildrenTrue);};export var downloadFile=function downloadFile(url,filename){var link=document.createElement('a');link.href=url;link.download=filename;link.click();};export var debounce=function debounce(func,wait){var timer=null;return function(){var _arguments=arguments,_this=this;if(timer)clearTimeout(timer);timer=setTimeout(function(){// 绑定this的目的是，使得func的this指针保持普通,调用时候的指向\n// argument也为调用debounce过后的func传入的参数\nfunc.apply(_this,_arguments);},wait);};};","map":{"version":3,"sources":["/Users/liuhongyang/Documents/GitHub/repositories/mindmap/src/methods/assistFunctions.js"],"names":["handlePropagation","event","stopPropagation","deepCopy","input","Object","Array","isArray","map","output","entries","forEach","key","value","findNode","node","search_id","id","children","child","find","item","setShowChildrenTrue","showChildren","downloadFile","url","filename","link","document","createElement","href","download","click","debounce","func","wait","timer","clearTimeout","setTimeout","apply","arguments"],"mappings":"+KAAA,MAAO,IAAMA,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAAAC,KAAK,CAAI,CACtCA,KAAK,CAACC,eAAN,GACH,CAFM,CAIP,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,KAAK,CAAI,CAAE;AAC/B,GAAIA,KAAK,WAAYC,CAAAA,MAArB,CAA6B,CACzB,GAAIC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,CAA0B,CACtB,MAAOA,CAAAA,KAAK,CAACI,GAAN,CAAUL,QAAV,CAAP,CACH,CACD,GAAIM,CAAAA,MAAM,CAAG,EAAb,CACAJ,MAAM,CAACK,OAAP,CAAeN,KAAf,EAAsBO,OAAtB,CAA8B,cAAkB,kCAAhBC,GAAgB,UAAXC,KAAW,UAC5CJ,MAAM,CAACG,GAAD,CAAN,CAAcT,QAAQ,CAACU,KAAD,CAAtB,CACH,CAFD,EAGA,MAAOJ,CAAAA,MAAP,CACH,CACD,MAAOL,CAAAA,KAAP,CACH,CAZM,CAcP,MAAO,IAAMU,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,IAAD,CAAOC,SAAP,CAAqB,CACzC,GAAID,IAAI,CAACE,EAAL,GAAYD,SAAhB,CAA2B,CACvB,MAAOD,CAAAA,IAAP,CACH,CACD,MAAOA,CAAAA,IAAI,CAACG,QAAL,CAAcV,GAAd,CAAkB,SAAAW,KAAK,QAAIL,CAAAA,QAAQ,CAACK,KAAD,CAAQH,SAAR,CAAZ,EAAvB,EAAuDI,IAAvD,CAA4D,SAAAC,IAAI,QAAIA,CAAAA,IAAJ,EAAhE,CAAP,CACH,CALM,CAOP,MAAO,IAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAAAP,IAAI,CAAI,CACvCA,IAAI,CAACQ,YAAL,CAAoB,IAApB,CACAR,IAAI,CAACG,QAAL,CAAcP,OAAd,CAAsBW,mBAAtB,EACH,CAHM,CAKP,MAAO,IAAME,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,GAAD,CAAMC,QAAN,CAAmB,CAC3C,GAAMC,CAAAA,IAAI,CAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAb,CACAF,IAAI,CAACG,IAAL,CAAYL,GAAZ,CACAE,IAAI,CAACI,QAAL,CAAgBL,QAAhB,CACAC,IAAI,CAACK,KAAL,GACH,CALM,CAOP,MAAO,IAAMC,CAAAA,QAAQ,CAAC,QAATA,CAAAA,QAAS,CAACC,IAAD,CAAMC,IAAN,CAAa,CAC/B,GAAIC,CAAAA,KAAK,CAAC,IAAV,CACA,MAAO,WAAU,qCACf,GAAGA,KAAH,CAAUC,YAAY,CAACD,KAAD,CAAZ,CACVA,KAAK,CAACE,UAAU,CAAC,UAAI,CACnB;AACA;AACAJ,IAAI,CAACK,KAAL,CAAW,KAAX,CAAgBC,UAAhB,EACD,CAJe,CAIdL,IAJc,CAAhB,CAKD,CAPD,CASD,CAXI","sourcesContent":["export const handlePropagation = event => {\n    event.stopPropagation();\n};\n\nexport const deepCopy = input => { // 简单的递归深拷贝，只考虑 context 中 state 的复制，因此没有处理 function 等\n    if (input instanceof Object) {\n        if (Array.isArray(input)) {\n            return input.map(deepCopy);\n        }\n        let output = {};\n        Object.entries(input).forEach(([key, value]) => {\n            output[key] = deepCopy(value);\n        });\n        return output;\n    }\n    return input;\n};\n\nexport const findNode = (node, search_id) => {\n    if (node.id === search_id) {\n        return node;\n    }\n    return node.children.map(child => findNode(child, search_id)).find(item => item);\n};\n\nexport const setShowChildrenTrue = node => {\n    node.showChildren = true;\n    node.children.forEach(setShowChildrenTrue);\n};\n\nexport const downloadFile = (url, filename) => {\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    link.click();\n};\n\nexport const debounce=(func,wait)=>{\n    let timer=null;\n    return function(){\n      if(timer) clearTimeout(timer);\n      timer=setTimeout(()=>{\n        // 绑定this的目的是，使得func的this指针保持普通,调用时候的指向\n        // argument也为调用debounce过后的func传入的参数\n        func.apply(this,arguments);\n      },wait)\n    }\n  \n  }"]},"metadata":{},"sourceType":"module"}