{"ast":null,"code":"var exportNodeToText=function exportNodeToText(node,layer,format){switch(format){case'MD':if(layer<6){return'#'.repeat(layer+1)+' '+node.text;}return'\\t'.repeat(layer-6)+'- '+node.text;case'TXT':return'\\t'.repeat(layer)+node.text;default:return;}};var exportMindmapToText=function exportMindmapToText(mindmap,format){var lines=[];var dfs=function dfs(node,layer,format){if(!node){return;}lines.push(exportNodeToText(node,layer,format));node.children.forEach(function(child){dfs(child,layer+1,format);});};dfs(mindmap,0,format);return lines.join('\\n');};var copyNodeData=function copyNodeData(format,target_node,source_node){switch(format){case'KM':target_node.data={};target_node.data.id=source_node.id;target_node.data.created=Date.now();target_node.data.text=source_node.text;target_node.data.expandState=source_node.showChildren?'expand':'collapse';target_node.children=source_node.children.map(function(child){return copyNodeData(format,{},child);});return target_node;default:return;}};var exportMindmapToJSON=function exportMindmapToJSON(mindmap,format){switch(format){case'KM':var km_mindmap={root:copyNodeData(format,{},mindmap)};return JSON.stringify(km_mindmap);default:return;}};export default(function(mindmap,format){var export_data;switch(format){case'MD':case'TXT':export_data=exportMindmapToText(mindmap,format);break;default:export_data=exportMindmapToJSON(mindmap,format);break;}return export_data;});","map":{"version":3,"sources":["/Users/liuhongyang/Documents/GitHub/repositories/mindmap/src/methods/mindmapExporter.js"],"names":["exportNodeToText","node","layer","format","repeat","text","exportMindmapToText","mindmap","lines","dfs","push","children","forEach","child","join","copyNodeData","target_node","source_node","data","id","created","Date","now","expandState","showChildren","map","exportMindmapToJSON","km_mindmap","root","JSON","stringify","export_data"],"mappings":"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","sourcesContent":["const exportNodeToText = (node, layer, format) => {\n    switch (format) {\n        case 'MD':\n            if (layer < 6) {\n                return '#'.repeat(layer + 1) + ' ' + node.text;\n            }\n            return '\\t'.repeat(layer - 6) + '- ' + node.text;\n        case 'TXT':\n            return '\\t'.repeat(layer) + node.text;\n        default:\n            return;\n    }\n};\n\nconst exportMindmapToText = (mindmap, format) => {\n    let lines = [];\n    const dfs = (node, layer, format) => {\n        if (!node) {\n            return;\n        }\n        lines.push(exportNodeToText(node, layer, format));\n        node.children.forEach(child => {\n            dfs(child, layer + 1, format)\n        });\n    };\n    dfs(mindmap, 0, format);\n    return lines.join('\\n');\n};\n\nconst copyNodeData = (format, target_node, source_node) => {\n    switch (format) {\n        case 'KM':\n            target_node.data = {};\n            target_node.data.id = source_node.id;\n            target_node.data.created = Date.now();\n            target_node.data.text = source_node.text;\n            target_node.data.expandState = source_node.showChildren ? 'expand' : 'collapse';\n            target_node.children = source_node.children.map(child => copyNodeData(format, {}, child));\n            return target_node;\n        default:\n            return;\n    }\n};\n\nconst exportMindmapToJSON = (mindmap, format) => {\n    switch (format) {\n        case 'KM':\n            const km_mindmap = {root: copyNodeData(format, {}, mindmap)};\n            return JSON.stringify(km_mindmap);\n        default:\n            return;\n    }\n};\n\nexport default (mindmap, format) => {\n    let export_data;\n    switch (format) {\n        case 'MD':\n        case 'TXT':\n            export_data = exportMindmapToText(mindmap, format);\n            break;\n        default:\n            export_data = exportMindmapToJSON(mindmap, format);\n            break;\n    }\n    return export_data;\n}\n"]},"metadata":{},"sourceType":"module"}