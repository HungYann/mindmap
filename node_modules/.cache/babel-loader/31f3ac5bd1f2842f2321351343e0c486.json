{"ast":null,"code":"import{useContext}from'react';import{context}from'../context';import*as mindmapAction from'../context/reducer/mindmap/actionCreator';import*as nodeStatusAction from'../context/reducer/nodeStatus/actionCreator.js';import{clearHistory}from'../context/reducer/history/actionCreator';import md5 from'md5';var useMindmap=function useMindmap(){var _useContext=useContext(context),mDispatch=_useContext.mindmap.dispatch,nDispatch=_useContext.nodeStatus.dispatch,hDispatch=_useContext.history.dispatch;return{toggleChildren:function toggleChildren(node_id,bool){mDispatch(mindmapAction.toggleChildren(node_id,bool));},addChild:function addChild(node_id){var new_node_id=md5(''+Date.now()+Math.random());mDispatch(mindmapAction.toggleChildren(node_id,true));mDispatch(mindmapAction.addChild(node_id,new_node_id));nDispatch(nodeStatusAction.setEdit(new_node_id));},addSibling:function addSibling(node_id,parent_id){var new_node_id=md5(''+Date.now()+Math.random());mDispatch(mindmapAction.addSibling(node_id,parent_id,new_node_id));nDispatch(nodeStatusAction.setEdit(new_node_id));},moveNode:function moveNode(node_id,target_id,parent_id,is_sibling){mDispatch(mindmapAction.moveNode(node_id,target_id,parent_id,is_sibling));nDispatch(nodeStatusAction.setSelect(node_id));},editNode:function editNode(node_id){nDispatch(nodeStatusAction.setEdit(node_id));},changeText:function changeText(node_id,text){mDispatch(mindmapAction.changeText(node_id,text));},editNodeInfo:function editNodeInfo(node_id,info){mDispatch(mindmapAction.changeInfo(node_id,info));},selectNode:function selectNode(node_id,select_by_click){nDispatch(nodeStatusAction.setSelect(node_id,select_by_click));},deleteNode:function deleteNode(node_id,parent_id){mDispatch(mindmapAction.deleteNode(node_id,parent_id));nDispatch(nodeStatusAction.setSelect(parent_id));},clearNodeStatus:function clearNodeStatus(){nDispatch(nodeStatusAction.clearAll());},setMindmap:function setMindmap(mindmap,is_new_map){if(is_new_map){hDispatch(clearHistory());nDispatch(nodeStatusAction.setSelect(mindmap.id));}mDispatch(mindmapAction.setMindmap(mindmap));},expandAll:function expandAll(node_id){mDispatch(mindmapAction.expandAll(node_id));nDispatch(nodeStatusAction.setSelect(node_id));}};};export default useMindmap;","map":{"version":3,"sources":["/Users/liuhongyang/Documents/GitHub/repositories/mindmap/src/customHooks/useMindmap.js"],"names":["useContext","context","mindmapAction","nodeStatusAction","clearHistory","md5","useMindmap","mDispatch","mindmap","dispatch","nDispatch","nodeStatus","hDispatch","history","toggleChildren","node_id","bool","addChild","new_node_id","Date","now","Math","random","setEdit","addSibling","parent_id","moveNode","target_id","is_sibling","setSelect","editNode","changeText","text","editNodeInfo","info","changeInfo","selectNode","select_by_click","deleteNode","clearNodeStatus","clearAll","setMindmap","is_new_map","id","expandAll"],"mappings":"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","sourcesContent":["import {useContext} from 'react';\nimport {context} from '../context';\nimport * as mindmapAction from '../context/reducer/mindmap/actionCreator';\nimport * as nodeStatusAction from '../context/reducer/nodeStatus/actionCreator.js';\nimport {clearHistory} from '../context/reducer/history/actionCreator';\nimport md5 from 'md5';\n\nconst useMindmap = () => {\n    const {mindmap: {dispatch: mDispatch}, nodeStatus: {dispatch: nDispatch}, history: {dispatch: hDispatch}} = useContext(context);\n    return {\n        toggleChildren: (node_id, bool) => {\n            mDispatch(mindmapAction.toggleChildren(node_id, bool));\n        },\n        addChild: node_id => {\n            const new_node_id = md5('' + Date.now() + Math.random());\n            mDispatch(mindmapAction.toggleChildren(node_id, true));\n            mDispatch(mindmapAction.addChild(node_id, new_node_id));\n            nDispatch(nodeStatusAction.setEdit(new_node_id));\n        },\n        addSibling: (node_id, parent_id) => {\n            const new_node_id = md5('' + Date.now() + Math.random());\n            mDispatch(mindmapAction.addSibling(node_id, parent_id, new_node_id));\n            nDispatch(nodeStatusAction.setEdit(new_node_id));\n        },\n        moveNode: (node_id, target_id, parent_id, is_sibling) => {\n            mDispatch(mindmapAction.moveNode(node_id, target_id, parent_id, is_sibling));\n            nDispatch(nodeStatusAction.setSelect(node_id));\n        },\n        editNode: node_id => {\n            nDispatch(nodeStatusAction.setEdit(node_id));\n        },\n        changeText: (node_id, text) => {\n            mDispatch(mindmapAction.changeText(node_id, text));\n        },\n        editNodeInfo:(node_id,info)=>{\n            mDispatch(mindmapAction.changeInfo(node_id, info));                      \n          },\n        selectNode: (node_id, select_by_click) => {\n            nDispatch(nodeStatusAction.setSelect(node_id, select_by_click));\n        },\n        deleteNode: (node_id, parent_id) => {\n            mDispatch(mindmapAction.deleteNode(node_id, parent_id));\n            nDispatch(nodeStatusAction.setSelect(parent_id));\n        },\n        clearNodeStatus: () => {\n            nDispatch(nodeStatusAction.clearAll());\n        },\n        setMindmap: (mindmap, is_new_map) => {\n            if (is_new_map) {\n                hDispatch(clearHistory());\n                nDispatch(nodeStatusAction.setSelect(mindmap.id));\n            }\n            mDispatch(mindmapAction.setMindmap(mindmap));\n        },\n        expandAll: node_id => {\n            mDispatch(mindmapAction.expandAll(node_id));\n            nDispatch(nodeStatusAction.setSelect(node_id));\n        }\n    }\n};\n\nexport default useMindmap;"]},"metadata":{},"sourceType":"module"}