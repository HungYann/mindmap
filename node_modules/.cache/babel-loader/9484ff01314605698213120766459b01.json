{"ast":null,"code":"import _slicedToArray from\"/Users/liuhongyang/Documents/GitHub/repositories/mindmap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import*as refer from'../statics/refer';var drawBezier=function drawBezier(ctx,from_x,from_y,to_x,to_y){ctx.moveTo(from_x,from_y);ctx.bezierCurveTo(from_x,to_y,0.9*to_x+0.1*from_x,to_y,to_x,to_y);};var drawLine=function drawLine(ctx,node,map){var parent_id=node.id,children=node.children;if(children.length>0){var _map$get=map.get(parent_id),_map$get2=_slicedToArray(_map$get,3),parent_x_left=_map$get2[0],parent_x_right=_map$get2[1],parent_y=_map$get2[2];children.forEach(function(child){var child_data=map.get(child.id);if(child_data){var _child_data=_slicedToArray(child_data,4),child_x_left=_child_data[0],child_x_right=_child_data[1],child_y=_child_data[2],child_tag=_child_data[3];if(child_tag===refer.LEFT_NODE){drawBezier(ctx,parent_x_left,parent_y,child_x_right,child_y);}else{drawBezier(ctx,parent_x_right,parent_y,child_x_left,child_y);}drawLine(ctx,child,map);}});}};export var drawLineCanvas=function drawLineCanvas(ctx,theme,mindmap,map){ctx.beginPath();ctx.lineWidth='2';ctx.strokeStyle=theme.main;drawLine(ctx,mindmap,map);ctx.stroke();ctx.closePath();};export var drawDragCanvas=function drawDragCanvas(ctx,theme,child_id,parent_offset,child_offset,child_left_of_parent){var virtual_rect_width=50,virtual_rect_height=20;ctx.beginPath();ctx.strokeStyle=theme.main;ctx.lineWidth='2';ctx.setLineDash([5,5]);var parent_x,parent_y=(parent_offset.top+parent_offset.bottom)/2,child_x,child_y=(child_offset.top+child_offset.bottom)/2;if(child_left_of_parent){parent_x=parent_offset.left;child_x=child_offset.right;ctx.strokeRect(child_x-virtual_rect_width,child_y-virtual_rect_height/2,virtual_rect_width,virtual_rect_height);}else{parent_x=parent_offset.right;child_x=child_offset.left;ctx.strokeRect(child_x,child_y-virtual_rect_height/2,virtual_rect_width,virtual_rect_height);}drawBezier(ctx,parent_x,parent_y,child_x,child_y);ctx.stroke();ctx.closePath();};","map":{"version":3,"sources":["/Users/liuhongyang/Documents/GitHub/repositories/mindmap/src/methods/drawCanvas.js"],"names":["refer","drawBezier","ctx","from_x","from_y","to_x","to_y","moveTo","bezierCurveTo","drawLine","node","map","parent_id","id","children","length","get","parent_x_left","parent_x_right","parent_y","forEach","child","child_data","child_x_left","child_x_right","child_y","child_tag","LEFT_NODE","drawLineCanvas","theme","mindmap","beginPath","lineWidth","strokeStyle","main","stroke","closePath","drawDragCanvas","child_id","parent_offset","child_offset","child_left_of_parent","virtual_rect_width","virtual_rect_height","setLineDash","parent_x","top","bottom","child_x","left","right","strokeRect"],"mappings":"+KAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,kBAAvB,CAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,GAAD,CAAMC,MAAN,CAAcC,MAAd,CAAsBC,IAAtB,CAA4BC,IAA5B,CAAqC,CACpDJ,GAAG,CAACK,MAAJ,CAAWJ,MAAX,CAAmBC,MAAnB,EACAF,GAAG,CAACM,aAAJ,CAAkBL,MAAlB,CAA0BG,IAA1B,CAAgC,IAAMD,IAAN,CAAa,IAAMF,MAAnD,CAA2DG,IAA3D,CAAiED,IAAjE,CAAuEC,IAAvE,EACH,CAHD,CAKA,GAAMG,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACP,GAAD,CAAMQ,IAAN,CAAYC,GAAZ,CAAoB,IACtBC,CAAAA,SADsB,CACCF,IADD,CAC1BG,EAD0B,CACXC,QADW,CACCJ,IADD,CACXI,QADW,CAEjC,GAAIA,QAAQ,CAACC,MAAT,CAAkB,CAAtB,CAAyB,cAC6BJ,GAAG,CAACK,GAAJ,CAAQJ,SAAR,CAD7B,sCACdK,aADc,cACCC,cADD,cACiBC,QADjB,cAGrBL,QAAQ,CAACM,OAAT,CAAiB,SAAAC,KAAK,CAAI,CACtB,GAAMC,CAAAA,UAAU,CAAGX,GAAG,CAACK,GAAJ,CAAQK,KAAK,CAACR,EAAd,CAAnB,CACA,GAAIS,UAAJ,CAAgB,gCAC8CA,UAD9C,IACLC,YADK,gBACSC,aADT,gBACwBC,OADxB,gBACiCC,SADjC,gBAEZ,GAAIA,SAAS,GAAK1B,KAAK,CAAC2B,SAAxB,CAAmC,CAC/B1B,UAAU,CAACC,GAAD,CAAMe,aAAN,CAAqBE,QAArB,CAA+BK,aAA/B,CAA8CC,OAA9C,CAAV,CACH,CAFD,IAEO,CACHxB,UAAU,CAACC,GAAD,CAAMgB,cAAN,CAAsBC,QAAtB,CAAgCI,YAAhC,CAA8CE,OAA9C,CAAV,CACH,CACDhB,QAAQ,CAACP,GAAD,CAAMmB,KAAN,CAAaV,GAAb,CAAR,CACH,CACJ,CAXD,EAYH,CACJ,CAlBD,CAoBA,MAAO,IAAMiB,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAC1B,GAAD,CAAM2B,KAAN,CAAaC,OAAb,CAAsBnB,GAAtB,CAA8B,CACxDT,GAAG,CAAC6B,SAAJ,GACA7B,GAAG,CAAC8B,SAAJ,CAAgB,GAAhB,CACA9B,GAAG,CAAC+B,WAAJ,CAAkBJ,KAAK,CAACK,IAAxB,CACAzB,QAAQ,CAACP,GAAD,CAAM4B,OAAN,CAAenB,GAAf,CAAR,CACAT,GAAG,CAACiC,MAAJ,GACAjC,GAAG,CAACkC,SAAJ,GACH,CAPM,CASP,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACnC,GAAD,CAAM2B,KAAN,CAAaS,QAAb,CAAuBC,aAAvB,CAAsCC,YAAtC,CAAoDC,oBAApD,CAA6E,CACvG,GAAMC,CAAAA,kBAAkB,CAAG,EAA3B,CACIC,mBAAmB,CAAG,EAD1B,CAEAzC,GAAG,CAAC6B,SAAJ,GACA7B,GAAG,CAAC+B,WAAJ,CAAkBJ,KAAK,CAACK,IAAxB,CACAhC,GAAG,CAAC8B,SAAJ,CAAgB,GAAhB,CACA9B,GAAG,CAAC0C,WAAJ,CAAgB,CAAC,CAAD,CAAI,CAAJ,CAAhB,EACA,GAAIC,CAAAA,QAAJ,CACI1B,QAAQ,CAAG,CAACoB,aAAa,CAACO,GAAd,CAAoBP,aAAa,CAACQ,MAAnC,EAA6C,CAD5D,CAEIC,OAFJ,CAGIvB,OAAO,CAAG,CAACe,YAAY,CAACM,GAAb,CAAmBN,YAAY,CAACO,MAAjC,EAA2C,CAHzD,CAIA,GAAIN,oBAAJ,CAA0B,CACtBI,QAAQ,CAAGN,aAAa,CAACU,IAAzB,CACAD,OAAO,CAAGR,YAAY,CAACU,KAAvB,CACAhD,GAAG,CAACiD,UAAJ,CAAeH,OAAO,CAAGN,kBAAzB,CAA6CjB,OAAO,CAAGkB,mBAAmB,CAAG,CAA7E,CAAgFD,kBAAhF,CAAoGC,mBAApG,EACH,CAJD,IAIO,CACHE,QAAQ,CAAGN,aAAa,CAACW,KAAzB,CACAF,OAAO,CAAGR,YAAY,CAACS,IAAvB,CACA/C,GAAG,CAACiD,UAAJ,CAAeH,OAAf,CAAwBvB,OAAO,CAAGkB,mBAAmB,CAAG,CAAxD,CAA2DD,kBAA3D,CAA+EC,mBAA/E,EACH,CACD1C,UAAU,CAACC,GAAD,CAAM2C,QAAN,CAAgB1B,QAAhB,CAA0B6B,OAA1B,CAAmCvB,OAAnC,CAAV,CACAvB,GAAG,CAACiC,MAAJ,GACAjC,GAAG,CAACkC,SAAJ,GACH,CAvBM","sourcesContent":["import * as refer from '../statics/refer';\n\nconst drawBezier = (ctx, from_x, from_y, to_x, to_y) => {\n    ctx.moveTo(from_x, from_y);\n    ctx.bezierCurveTo(from_x, to_y, 0.9 * to_x + 0.1 * from_x, to_y, to_x, to_y);\n};\n\nconst drawLine = (ctx, node, map) => {\n    const {id: parent_id, children} = node;\n    if (children.length > 0) {\n        const [parent_x_left, parent_x_right, parent_y] = map.get(parent_id);\n\n        children.forEach(child => {\n            const child_data = map.get(child.id);\n            if (child_data) {\n                const [child_x_left, child_x_right, child_y, child_tag] = child_data;\n                if (child_tag === refer.LEFT_NODE) {\n                    drawBezier(ctx, parent_x_left, parent_y, child_x_right, child_y);\n                } else {\n                    drawBezier(ctx, parent_x_right, parent_y, child_x_left, child_y);\n                }\n                drawLine(ctx, child, map);\n            }\n        })\n    }\n};\n\nexport const drawLineCanvas = (ctx, theme, mindmap, map) => {\n    ctx.beginPath();\n    ctx.lineWidth = '2';\n    ctx.strokeStyle = theme.main;\n    drawLine(ctx, mindmap, map);\n    ctx.stroke();\n    ctx.closePath();\n};\n\nexport const drawDragCanvas = (ctx, theme, child_id, parent_offset, child_offset, child_left_of_parent) => {\n    const virtual_rect_width = 50,\n        virtual_rect_height = 20;\n    ctx.beginPath();\n    ctx.strokeStyle = theme.main;\n    ctx.lineWidth = '2';\n    ctx.setLineDash([5, 5]);\n    let parent_x,\n        parent_y = (parent_offset.top + parent_offset.bottom) / 2,\n        child_x,\n        child_y = (child_offset.top + child_offset.bottom) / 2;\n    if (child_left_of_parent) {\n        parent_x = parent_offset.left;\n        child_x = child_offset.right;\n        ctx.strokeRect(child_x - virtual_rect_width, child_y - virtual_rect_height / 2, virtual_rect_width, virtual_rect_height);\n    } else {\n        parent_x = parent_offset.right;\n        child_x = child_offset.left;\n        ctx.strokeRect(child_x, child_y - virtual_rect_height / 2, virtual_rect_width, virtual_rect_height);\n    }\n    drawBezier(ctx, parent_x, parent_y, child_x, child_y);\n    ctx.stroke();\n    ctx.closePath();\n};"]},"metadata":{},"sourceType":"module"}