{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport { NEW_NODE_TEXT } from '../../../statics/refer';\nexport const toggleChildren = (node_id, bool) => ({\n  type: actionTypes.TOGGLE_CHILDREN,\n  data: {\n    node_id,\n    node: {\n      showChildren: bool\n    }\n  }\n});\nexport const addChild = (node_id, new_node_id) => ({\n  type: actionTypes.ADD_CHILD,\n  data: {\n    node_id,\n    node: {\n      id: new_node_id,\n      text: NEW_NODE_TEXT,\n      showChildren: true,\n      children: []\n    }\n  }\n});\nexport const addSibling = (node_id, parent_id, new_node_id) => ({\n  type: actionTypes.ADD_SIBLING,\n  data: {\n    node_id,\n    parent_id,\n    node: {\n      id: new_node_id,\n      text: NEW_NODE_TEXT,\n      showChildren: true,\n      children: []\n    }\n  }\n});\nexport const moveNode = (node_id, target_id, parent_id, is_sibling) => ({\n  type: actionTypes.MOVE_NODE,\n  data: {\n    node_id,\n    target_id,\n    parent_id,\n    is_sibling\n  }\n});\nexport const changeText = (node_id, text) => ({\n  type: actionTypes.CHANGE_TEXT,\n  data: {\n    node_id,\n    node: {\n      text\n    }\n  }\n});\nexport const changeInfo = (node_id, info) => ({\n  type: actionTypes.CHANGE_TEXT,\n  data: {\n    node_id,\n    node: {\n      info\n    }\n  }\n});\nexport const deleteNode = (node_id, parent_id) => ({\n  type: actionTypes.DELETE_NODE,\n  data: {\n    node_id,\n    parent_id\n  }\n});\nexport const expandAll = node_id => ({\n  type: actionTypes.EXPAND_ALL,\n  data: {\n    node_id\n  }\n});\nexport const setMindmap = mindmap => ({\n  type: actionTypes.SET_MINDMAP,\n  data: {\n    mindmap\n  }\n});","map":{"version":3,"sources":["/Users/liuhongyang/Documents/GitHub/repositories/mindmap/src/context/reducer/mindmap/actionCreator.js"],"names":["actionTypes","NEW_NODE_TEXT","toggleChildren","node_id","bool","type","TOGGLE_CHILDREN","data","node","showChildren","addChild","new_node_id","ADD_CHILD","id","text","children","addSibling","parent_id","ADD_SIBLING","moveNode","target_id","is_sibling","MOVE_NODE","changeText","CHANGE_TEXT","changeInfo","info","deleteNode","DELETE_NODE","expandAll","EXPAND_ALL","setMindmap","mindmap","SET_MINDMAP"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,SAAQC,aAAR,QAA4B,wBAA5B;AAEA,OAAO,MAAMC,cAAc,GAAG,CAACC,OAAD,EAAUC,IAAV,MAAoB;AAC9CC,EAAAA,IAAI,EAAEL,WAAW,CAACM,eAD4B;AAE9CC,EAAAA,IAAI,EAAE;AACFJ,IAAAA,OADE;AAEFK,IAAAA,IAAI,EAAE;AACFC,MAAAA,YAAY,EAAEL;AADZ;AAFJ;AAFwC,CAApB,CAAvB;AAUP,OAAO,MAAMM,QAAQ,GAAG,CAACP,OAAD,EAAUQ,WAAV,MAA2B;AAC/CN,EAAAA,IAAI,EAAEL,WAAW,CAACY,SAD6B;AAE/CL,EAAAA,IAAI,EAAE;AACFJ,IAAAA,OADE;AAEFK,IAAAA,IAAI,EAAE;AACFK,MAAAA,EAAE,EAAEF,WADF;AAEFG,MAAAA,IAAI,EAAEb,aAFJ;AAGFQ,MAAAA,YAAY,EAAE,IAHZ;AAIFM,MAAAA,QAAQ,EAAE;AAJR;AAFJ;AAFyC,CAA3B,CAAjB;AAaP,OAAO,MAAMC,UAAU,GAAG,CAACb,OAAD,EAAUc,SAAV,EAAqBN,WAArB,MAAsC;AAC5DN,EAAAA,IAAI,EAAEL,WAAW,CAACkB,WAD0C;AAE5DX,EAAAA,IAAI,EAAE;AACFJ,IAAAA,OADE;AAEFc,IAAAA,SAFE;AAGFT,IAAAA,IAAI,EAAE;AACFK,MAAAA,EAAE,EAAEF,WADF;AAEFG,MAAAA,IAAI,EAAEb,aAFJ;AAGFQ,MAAAA,YAAY,EAAE,IAHZ;AAIFM,MAAAA,QAAQ,EAAE;AAJR;AAHJ;AAFsD,CAAtC,CAAnB;AAcP,OAAO,MAAMI,QAAQ,GAAG,CAAChB,OAAD,EAAUiB,SAAV,EAAqBH,SAArB,EAAgCI,UAAhC,MAAgD;AACpEhB,EAAAA,IAAI,EAAEL,WAAW,CAACsB,SADkD;AAEpEf,EAAAA,IAAI,EAAE;AACFJ,IAAAA,OADE;AAEFiB,IAAAA,SAFE;AAGFH,IAAAA,SAHE;AAIFI,IAAAA;AAJE;AAF8D,CAAhD,CAAjB;AAUP,OAAO,MAAME,UAAU,GAAG,CAACpB,OAAD,EAAUW,IAAV,MAAoB;AAC1CT,EAAAA,IAAI,EAAEL,WAAW,CAACwB,WADwB;AAE1CjB,EAAAA,IAAI,EAAE;AACFJ,IAAAA,OADE;AAEFK,IAAAA,IAAI,EAAE;AACFM,MAAAA;AADE;AAFJ;AAFoC,CAApB,CAAnB;AAUP,OAAO,MAAMW,UAAU,GAAG,CAACtB,OAAD,EAAUuB,IAAV,MAAoB;AAC1CrB,EAAAA,IAAI,EAAEL,WAAW,CAACwB,WADwB;AAE1CjB,EAAAA,IAAI,EAAE;AACFJ,IAAAA,OADE;AAEFK,IAAAA,IAAI,EAAE;AACFkB,MAAAA;AADE;AAFJ;AAFoC,CAApB,CAAnB;AAUP,OAAO,MAAMC,UAAU,GAAG,CAACxB,OAAD,EAAUc,SAAV,MAAyB;AAC/CZ,EAAAA,IAAI,EAAEL,WAAW,CAAC4B,WAD6B;AAE/CrB,EAAAA,IAAI,EAAE;AACFJ,IAAAA,OADE;AAEFc,IAAAA;AAFE;AAFyC,CAAzB,CAAnB;AAQP,OAAO,MAAMY,SAAS,GAAG1B,OAAO,KAAK;AACjCE,EAAAA,IAAI,EAAEL,WAAW,CAAC8B,UADe;AAEjCvB,EAAAA,IAAI,EAAE;AACFJ,IAAAA;AADE;AAF2B,CAAL,CAAzB;AAOP,OAAO,MAAM4B,UAAU,GAAGC,OAAO,KAAK;AAClC3B,EAAAA,IAAI,EAAEL,WAAW,CAACiC,WADgB;AAElC1B,EAAAA,IAAI,EAAE;AACFyB,IAAAA;AADE;AAF4B,CAAL,CAA1B","sourcesContent":["import * as actionTypes from './actionTypes';\nimport {NEW_NODE_TEXT} from '../../../statics/refer';\n\nexport const toggleChildren = (node_id, bool) => ({\n    type: actionTypes.TOGGLE_CHILDREN,\n    data: {\n        node_id,\n        node: {\n            showChildren: bool\n        }\n    }\n});\n\nexport const addChild = (node_id, new_node_id) => ({\n    type: actionTypes.ADD_CHILD,\n    data: {\n        node_id,\n        node: {\n            id: new_node_id,\n            text: NEW_NODE_TEXT,\n            showChildren: true,\n            children: []\n        }\n    }\n});\n\nexport const addSibling = (node_id, parent_id, new_node_id) => ({\n    type: actionTypes.ADD_SIBLING,\n    data: {\n        node_id,\n        parent_id,\n        node: {\n            id: new_node_id,\n            text: NEW_NODE_TEXT,\n            showChildren: true,\n            children: []\n        }\n    }\n});\n\nexport const moveNode = (node_id, target_id, parent_id, is_sibling) => ({\n    type: actionTypes.MOVE_NODE,\n    data: {\n        node_id,\n        target_id,\n        parent_id,\n        is_sibling\n    }\n});\n\nexport const changeText = (node_id, text) => ({\n    type: actionTypes.CHANGE_TEXT,\n    data: {\n        node_id,\n        node: {\n            text\n        }\n    }\n});\n\nexport const changeInfo = (node_id, info) => ({\n    type: actionTypes.CHANGE_TEXT,\n    data: {\n        node_id,\n        node: {\n            info\n        }\n    }\n});\n\nexport const deleteNode = (node_id, parent_id) => ({\n    type: actionTypes.DELETE_NODE,\n    data: {\n        node_id,\n        parent_id\n    }\n});\n\nexport const expandAll = node_id => ({\n    type: actionTypes.EXPAND_ALL,\n    data: {\n        node_id\n    }\n});\n\nexport const setMindmap = mindmap => ({\n    type: actionTypes.SET_MINDMAP,\n    data: {\n        mindmap\n    }\n});\n"]},"metadata":{},"sourceType":"module"}