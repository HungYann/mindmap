{"ast":null,"code":"import { useContext } from 'react';\nimport { context } from '../context';\nimport * as mindmapAction from '../context/reducer/mindmap/actionCreator';\nimport * as nodeStatusAction from '../context/reducer/nodeStatus/actionCreator.js';\nimport { clearHistory } from '../context/reducer/history/actionCreator';\nimport md5 from 'md5';\n\nconst useMindmap = () => {\n  const _useContext = useContext(context),\n        mDispatch = _useContext.mindmap.dispatch,\n        nDispatch = _useContext.nodeStatus.dispatch,\n        hDispatch = _useContext.history.dispatch;\n\n  return {\n    toggleChildren: (node_id, bool) => {\n      mDispatch(mindmapAction.toggleChildren(node_id, bool));\n    },\n    addChild: node_id => {\n      const new_node_id = md5('' + Date.now() + Math.random());\n      mDispatch(mindmapAction.toggleChildren(node_id, true));\n      mDispatch(mindmapAction.addChild(node_id, new_node_id));\n      nDispatch(nodeStatusAction.setEdit(new_node_id));\n    },\n    addSibling: (node_id, parent_id) => {\n      const new_node_id = md5('' + Date.now() + Math.random());\n      mDispatch(mindmapAction.addSibling(node_id, parent_id, new_node_id));\n      nDispatch(nodeStatusAction.setEdit(new_node_id));\n    },\n    moveNode: (node_id, target_id, parent_id, is_sibling) => {\n      mDispatch(mindmapAction.moveNode(node_id, target_id, parent_id, is_sibling));\n      nDispatch(nodeStatusAction.setSelect(node_id));\n    },\n    editNode: node_id => {\n      nDispatch(nodeStatusAction.setEdit(node_id));\n    },\n    changeText: (node_id, text) => {\n      mDispatch(mindmapAction.changeText(node_id, text));\n    },\n    editNodeInfo: (node_id, info) => {\n      mDispatch(mindmapAction.changeInfo(node_id, info));\n    },\n    selectNode: (node_id, select_by_click) => {\n      nDispatch(nodeStatusAction.setSelect(node_id, select_by_click));\n    },\n    deleteNode: (node_id, parent_id) => {\n      mDispatch(mindmapAction.deleteNode(node_id, parent_id));\n      nDispatch(nodeStatusAction.setSelect(parent_id));\n    },\n    clearNodeStatus: () => {\n      nDispatch(nodeStatusAction.clearAll());\n    },\n    setMindmap: (mindmap, is_new_map) => {\n      if (is_new_map) {\n        hDispatch(clearHistory());\n        nDispatch(nodeStatusAction.setSelect(mindmap.id));\n      }\n\n      mDispatch(mindmapAction.setMindmap(mindmap));\n    },\n    expandAll: node_id => {\n      mDispatch(mindmapAction.expandAll(node_id));\n      nDispatch(nodeStatusAction.setSelect(node_id));\n    }\n  };\n};\n\nexport default useMindmap;","map":{"version":3,"sources":["/Users/liuhongyang/Desktop/RMind-develop/src/customHooks/useMindmap.js"],"names":["useContext","context","mindmapAction","nodeStatusAction","clearHistory","md5","useMindmap","mDispatch","mindmap","dispatch","nDispatch","nodeStatus","hDispatch","history","toggleChildren","node_id","bool","addChild","new_node_id","Date","now","Math","random","setEdit","addSibling","parent_id","moveNode","target_id","is_sibling","setSelect","editNode","changeText","text","editNodeInfo","info","changeInfo","selectNode","select_by_click","deleteNode","clearNodeStatus","clearAll","setMindmap","is_new_map","id","expandAll"],"mappings":"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","sourcesContent":["import {useContext} from 'react';\nimport {context} from '../context';\nimport * as mindmapAction from '../context/reducer/mindmap/actionCreator';\nimport * as nodeStatusAction from '../context/reducer/nodeStatus/actionCreator.js';\nimport {clearHistory} from '../context/reducer/history/actionCreator';\nimport md5 from 'md5';\n\nconst useMindmap = () => {\n    const {mindmap: {dispatch: mDispatch}, nodeStatus: {dispatch: nDispatch}, history: {dispatch: hDispatch}} = useContext(context);\n    return {\n        toggleChildren: (node_id, bool) => {\n            mDispatch(mindmapAction.toggleChildren(node_id, bool));\n        },\n        addChild: node_id => {\n            const new_node_id = md5('' + Date.now() + Math.random());\n            mDispatch(mindmapAction.toggleChildren(node_id, true));\n            mDispatch(mindmapAction.addChild(node_id, new_node_id));\n            nDispatch(nodeStatusAction.setEdit(new_node_id));\n        },\n        addSibling: (node_id, parent_id) => {\n            const new_node_id = md5('' + Date.now() + Math.random());\n            mDispatch(mindmapAction.addSibling(node_id, parent_id, new_node_id));\n            nDispatch(nodeStatusAction.setEdit(new_node_id));\n        },\n        moveNode: (node_id, target_id, parent_id, is_sibling) => {\n            mDispatch(mindmapAction.moveNode(node_id, target_id, parent_id, is_sibling));\n            nDispatch(nodeStatusAction.setSelect(node_id));\n        },\n        editNode: node_id => {\n            nDispatch(nodeStatusAction.setEdit(node_id));\n        },\n        changeText: (node_id, text) => {\n            mDispatch(mindmapAction.changeText(node_id, text));\n        },\n        editNodeInfo:(node_id,info)=>{\n            mDispatch(mindmapAction.changeInfo(node_id, info));                      \n          },\n        selectNode: (node_id, select_by_click) => {\n            nDispatch(nodeStatusAction.setSelect(node_id, select_by_click));\n        },\n        deleteNode: (node_id, parent_id) => {\n            mDispatch(mindmapAction.deleteNode(node_id, parent_id));\n            nDispatch(nodeStatusAction.setSelect(parent_id));\n        },\n        clearNodeStatus: () => {\n            nDispatch(nodeStatusAction.clearAll());\n        },\n        setMindmap: (mindmap, is_new_map) => {\n            if (is_new_map) {\n                hDispatch(clearHistory());\n                nDispatch(nodeStatusAction.setSelect(mindmap.id));\n            }\n            mDispatch(mindmapAction.setMindmap(mindmap));\n        },\n        expandAll: node_id => {\n            mDispatch(mindmapAction.expandAll(node_id));\n            nDispatch(nodeStatusAction.setSelect(node_id));\n        }\n    }\n};\n\nexport default useMindmap;"]},"metadata":{},"sourceType":"module"}