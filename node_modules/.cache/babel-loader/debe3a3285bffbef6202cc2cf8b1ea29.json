{"ast":null,"code":"export const handlePropagation = event => {\n  event.stopPropagation();\n};\nexport const deepCopy = input => {\n  // 简单的递归深拷贝，只考虑 context 中 state 的复制，因此没有处理 function 等\n  if (input instanceof Object) {\n    if (Array.isArray(input)) {\n      return input.map(deepCopy);\n    }\n\n    let output = {};\n    Object.entries(input).forEach(([key, value]) => {\n      output[key] = deepCopy(value);\n    });\n    return output;\n  }\n\n  return input;\n};\nexport const findNode = (node, search_id) => {\n  if (node.id === search_id) {\n    return node;\n  }\n\n  return node.children.map(child => findNode(child, search_id)).find(item => item);\n};\nexport const setShowChildrenTrue = node => {\n  node.showChildren = true;\n  node.children.forEach(setShowChildrenTrue);\n};\nexport const downloadFile = (url, filename) => {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  link.click();\n};\nexport const debounce = (func, wait) => {\n  let timer = null;\n  return function () {\n    if (timer) clearTimeout(timer);\n    timer = setTimeout(() => {\n      // 绑定this的目的是，使得func的this指针保持普通,调用时候的指向\n      // argument也为调用debounce过后的func传入的参数\n      func.apply(this, arguments);\n    }, wait);\n  };\n};","map":{"version":3,"sources":["/Users/liuhongyang/Documents/GitHub/repositories/mindmap/src/methods/assistFunctions.js"],"names":["handlePropagation","event","stopPropagation","deepCopy","input","Object","Array","isArray","map","output","entries","forEach","key","value","findNode","node","search_id","id","children","child","find","item","setShowChildrenTrue","showChildren","downloadFile","url","filename","link","document","createElement","href","download","click","debounce","func","wait","timer","clearTimeout","setTimeout","apply","arguments"],"mappings":"AAAA,OAAO,MAAMA,iBAAiB,GAAGC,KAAK,IAAI;AACtCA,EAAAA,KAAK,CAACC,eAAN;AACH,CAFM;AAIP,OAAO,MAAMC,QAAQ,GAAGC,KAAK,IAAI;AAAE;AAC/B,MAAIA,KAAK,YAAYC,MAArB,EAA6B;AACzB,QAAIC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;AACtB,aAAOA,KAAK,CAACI,GAAN,CAAUL,QAAV,CAAP;AACH;;AACD,QAAIM,MAAM,GAAG,EAAb;AACAJ,IAAAA,MAAM,CAACK,OAAP,CAAeN,KAAf,EAAsBO,OAAtB,CAA8B,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkB;AAC5CJ,MAAAA,MAAM,CAACG,GAAD,CAAN,GAAcT,QAAQ,CAACU,KAAD,CAAtB;AACH,KAFD;AAGA,WAAOJ,MAAP;AACH;;AACD,SAAOL,KAAP;AACH,CAZM;AAcP,OAAO,MAAMU,QAAQ,GAAG,CAACC,IAAD,EAAOC,SAAP,KAAqB;AACzC,MAAID,IAAI,CAACE,EAAL,KAAYD,SAAhB,EAA2B;AACvB,WAAOD,IAAP;AACH;;AACD,SAAOA,IAAI,CAACG,QAAL,CAAcV,GAAd,CAAkBW,KAAK,IAAIL,QAAQ,CAACK,KAAD,EAAQH,SAAR,CAAnC,EAAuDI,IAAvD,CAA4DC,IAAI,IAAIA,IAApE,CAAP;AACH,CALM;AAOP,OAAO,MAAMC,mBAAmB,GAAGP,IAAI,IAAI;AACvCA,EAAAA,IAAI,CAACQ,YAAL,GAAoB,IAApB;AACAR,EAAAA,IAAI,CAACG,QAAL,CAAcP,OAAd,CAAsBW,mBAAtB;AACH,CAHM;AAKP,OAAO,MAAME,YAAY,GAAG,CAACC,GAAD,EAAMC,QAAN,KAAmB;AAC3C,QAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAb;AACAF,EAAAA,IAAI,CAACG,IAAL,GAAYL,GAAZ;AACAE,EAAAA,IAAI,CAACI,QAAL,GAAgBL,QAAhB;AACAC,EAAAA,IAAI,CAACK,KAAL;AACH,CALM;AAOP,OAAO,MAAMC,QAAQ,GAAC,CAACC,IAAD,EAAMC,IAAN,KAAa;AAC/B,MAAIC,KAAK,GAAC,IAAV;AACA,SAAO,YAAU;AACf,QAAGA,KAAH,EAAUC,YAAY,CAACD,KAAD,CAAZ;AACVA,IAAAA,KAAK,GAACE,UAAU,CAAC,MAAI;AACnB;AACA;AACAJ,MAAAA,IAAI,CAACK,KAAL,CAAW,IAAX,EAAgBC,SAAhB;AACD,KAJe,EAIdL,IAJc,CAAhB;AAKD,GAPD;AASD,CAXI","sourcesContent":["export const handlePropagation = event => {\n    event.stopPropagation();\n};\n\nexport const deepCopy = input => { // 简单的递归深拷贝，只考虑 context 中 state 的复制，因此没有处理 function 等\n    if (input instanceof Object) {\n        if (Array.isArray(input)) {\n            return input.map(deepCopy);\n        }\n        let output = {};\n        Object.entries(input).forEach(([key, value]) => {\n            output[key] = deepCopy(value);\n        });\n        return output;\n    }\n    return input;\n};\n\nexport const findNode = (node, search_id) => {\n    if (node.id === search_id) {\n        return node;\n    }\n    return node.children.map(child => findNode(child, search_id)).find(item => item);\n};\n\nexport const setShowChildrenTrue = node => {\n    node.showChildren = true;\n    node.children.forEach(setShowChildrenTrue);\n};\n\nexport const downloadFile = (url, filename) => {\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    link.click();\n};\n\nexport const debounce=(func,wait)=>{\n    let timer=null;\n    return function(){\n      if(timer) clearTimeout(timer);\n      timer=setTimeout(()=>{\n        // 绑定this的目的是，使得func的this指针保持普通,调用时候的指向\n        // argument也为调用debounce过后的func传入的参数\n        func.apply(this,arguments);\n      },wait)\n    }\n  \n  }"]},"metadata":{},"sourceType":"module"}